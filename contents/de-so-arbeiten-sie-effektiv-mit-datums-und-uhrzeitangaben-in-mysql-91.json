{"title":"So arbeiten Sie effektiv mit Datums- und Uhrzeitangaben in MySQL","content":"<p> Datums- und Uhrzeitangaben sind wichtig, sie helfen, die Dinge zu organisieren und sind ein integraler Bestandteil jedes Softwarebetriebs. </p> <p> Die effiziente Arbeit mit ihnen innerhalb der Datenbank kann manchmal verwirrend erscheinen, egal ob es sich um die Arbeit über die verschiedenen Zeitzonen, das Hinzufügen / Subtrahieren von Daten oder andere Vorgänge handelt. </p> <p> Lernen Sie die verschiedenen verfügbaren MySQL-Funktionen kennen, um Daten / Uhrzeiten in Ihrer Datenbank einfach zu handhaben und zu verwalten. </p> <h2 id=\"working-with-time-zones\"> Arbeiten mit Zeitzonen </h2> <p> Um die Standardisierung zu gewährleisten, sollten Sie immer nur mit Datumsangaben / Uhrzeiten in der UTC-Zeitzone arbeiten. Jedes Mal, wenn Sie eine Verbindung zur MySQL-Datenbank herstellen, sollten Sie die Zeitzone auf UTC umstellen, was mit folgendem SQL-Statement möglich ist: </p> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <p> Da alle Daten jetzt in UTC gespeichert werden, wissen Sie immer, womit Sie arbeiten, was die Dinge einfacher und unkomplizierter macht. </p> <p> Bei Bedarf können Sie einfach <a href=\"https://www.makeuseof.com/tag/polytime-time-zone-conversion-app/\" target=\"_blank\" rel=\"nofollow noopener\"> Konvertieren Sie die Zeitzone </a> eines beliebigen Datums-/Zeitstempelwerts mit dem Handy <strong> CONVERT_TZ() </strong> MySQL-Funktion. Sie müssen zuerst den Offset kennen, zum Beispiel ist PST an der Westküste Nordamerikas UTC -08:00. </p> <pre><code class=\"hljs ruby\">SELECT CONVERT_TZ('2021-02-04 21:47:23', '+0:00', '-8:00');</code></pre> <p> Das führt zu <strong> 2021-02-04 13:47:23 </strong> was genau richtig ist. Die drei an . übergebenen Argumente <strong> CONVERT_TZ() </strong> sind zuerst die Datumszeit / der Zeitstempel, mit dem Sie beginnen (verwenden Sie now() für die aktuelle Uhrzeit), der zweite ist immer <strong> &#39;+0:00&#39; </strong> da alle Datumsangaben in der Datenbank auf UTC gezwungen werden und das letzte der Offset ist, in den wir das Datum umwandeln möchten. </p> <p> </p> <h2 id=\"add-subtract-dates\"> Daten hinzufügen/subtrahieren </h2> <p> Häufig müssen Sie Daten hinzufügen oder davon abziehen, z. B. wenn Sie Datensätze von vor einer Woche abrufen müssen, oder <a href=\"https://www.makeuseof.com/how-to-use-crontab-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> etwas planen </a> einen Monat ab jetzt. </p> <p> Zum Glück hat MySQL das ausgezeichnete <strong> DATE_ADD() </strong> und <strong> DATE_SUB() </strong> Funktionen, die diese Aufgabe extrem einfach machen. Sie können beispielsweise mit der SQL-Anweisung zwei Wochen vom aktuellen Datum abziehen: </p> <pre><code class=\"hljs\">SELECT DATE_SUB(now(), interval 2 week);</code></pre> <p> Wenn Sie stattdessen drei Tage zu einem vorhandenen Zeitstempel hinzufügen möchten, verwenden Sie Folgendes: </p> <pre><code class=\"hljs ruby\">SELECT DATE_ADD('2021-02-07 11:52:06', interval 3 day);</code></pre> <p> Beide Funktionen funktionieren gleich, das erste Argument ist der Zeitstempel, mit dem Sie beginnen, und das zweite Argument ist das Intervall zum Addieren oder Subtrahieren. Das zweite Argument wird immer gleich formatiert, beginnend mit dem Wort <strong> Intervall </strong> gefolgt von einem numerischen Wert und dem Intervall selbst, das einer der folgenden sein kann: Sekunde, Minute, Stunde, Tag, Woche, Monat, Quartal, Jahr. </p> <p> Wenn Sie als weiteres Beispiel alle Anmeldungen der letzten 34 Minuten abrufen möchten, können Sie eine SQL-Anweisung wie die folgende verwenden: </p> <pre><code class=\"hljs perl\">SELECT * FROM logins WHERE login_date >= DATE_SUB(now(), interval 45 minute);</code></pre> <p> Wie Sie sehen können, werden dadurch alle Datensätze aus dem <strong> Anmeldungen </strong> Tabelle mit einem Login-Datum größer als die aktuelle Zeit minus 45 Minuten, also die letzten 45 Minuten. </p> <p> </p> <h2 id=\"get-difference-between-dates\"> Holen Sie sich den Unterschied zwischen den Daten </h2> <p> Manchmal müssen Sie herausfinden, wie viel Zeit zwischen zwei Daten verstrichen ist. Die Anzahl der Tage zwischen zwei verschiedenen Daten können Sie ganz einfach mit dem <strong> DATEDIFF </strong> Funktion, wie die folgende SQL-Anweisung: </p> <pre><code class=\"hljs ruby\">SELECT DATEDIFF(now(), '2020-12-15');</code></pre> <p> Das <strong> DATEDIFF </strong> Die Funktion nimmt zwei Argumente an, die beide Datums-/Zeitstempel sind, und gibt die Anzahl der Tage zwischen ihnen an. Das obige Beispiel zeigt die Anzahl der Tage, die vom 15. Dezember 2020 bis heute verstrichen sind. </p> <p> Um die Anzahl der Sekunden zwischen zwei Datumsangaben zu erhalten, <strong> TO_SECONDS() </strong> Funktion kann nützlich sein, zum Beispiel: </p> <pre><code class=\"hljs ruby\">SELECT TO_SECONDS(now()) - TO_SECONDS('2021-02-05 11:56:41');</code></pre> <p> Daraus ergibt sich die Anzahl der Sekunden zwischen den beiden angegebenen Daten. </p> <p> </p> <h2 id=\"extract-segments-from-dates\"> Segmente aus Datumsangaben extrahieren </h2> <p> Es gibt verschiedene MySQL-Funktionen, mit denen Sie ganz einfach bestimmte Segmente aus Datumsangaben extrahieren können, z. B. wenn Sie nur den Monat, den Tag des Jahres oder die Stunde benötigen. Hier einige Beispiele für solche Funktionen: </p> <pre><code class=\"hljs ruby\">SELECT MONTH('2021-02-11 15:27:52');</code></pre> <pre><code class=\"hljs\">SELECT HOUR(now());</code></pre> <pre><code class=\"hljs ruby\">SELECT DAYOFYEAR('2021-07-15 12:00:00');</code></pre> <p> Die obigen SQL-Anweisungen führen zu <strong> 02 </strong> , die aktuelle Stunde und <strong> 196 </strong> denn der 15. September ist der 196. Tag des Jahres. Hier ist eine Liste aller verfügbaren Datenextraktionsfunktionen, von denen jede nur ein Argument verwendet, das Datum, aus dem extrahiert wird: </p> <pre><code class=\"hljs perl\">- SECOND()<br>- MINUTE()<br>- HOUR()<br>- DAY()<br>- WEEK() - Number 0 - 52 defining the week within the year.<br>- MONTH()<br>- QUARTER() - Number 1 - 4 defining the quarter of the year.<br>- YEAR()<br>- DAYOFYEAR() - The day of the year (eg. Sept 15th = 196).<br>- LAST_DAY() - The last day in the given month.<br>- DATE() - The date in YYYY-MM-DD format without the time.<br>- TIME() The time in HH:II:SS format without the date.<br>- TO_DAYS() - The number of days since A.D. 0.<br>- TO_SECONDS() - The number of seconds since A.D. 0.<br>- UNIX_TIMESTAMP() - The number of seconds since the epoch (Jan 1st, 1970)</code></pre> <p> Wenn Sie beispielsweise nur den Monat und das Jahr abrufen möchten, in denen alle Benutzer erstellt wurden, können Sie eine SQL-Anweisung verwenden wie: </p> <pre><code class=\"hljs\">SELECT id, MONTH(created_at), YEAR(created_at) FROM users;</code></pre> <p> Dies würde alle Datensätze innerhalb der <strong> Benutzer </strong> Tabelle und zeigen Sie die ID#, den Monat und das Jahr an, in denen jeder Benutzer erstellt wurde. </p> <p> </p> <h2 id=\"grouping-records-by-date-period\"> Gruppieren von Datensätzen nach Datum Zeitraum </h2> <p> Eine hervorragende Verwendung von Datumsfunktionen ist die Möglichkeit, Datensätze nach Datumszeitraum zu gruppieren mit <strong> GRUPPIERE NACH </strong> innerhalb Ihrer SQL-Anweisungen. Vielleicht möchten Sie beispielsweise den Gesamtbetrag aller Bestellungen im Jahr 2020 nach Monaten gruppiert abrufen. Sie könnten eine SQL-Anweisung verwenden wie: </p> <pre><code class=\"hljs ruby\">SELECT MONTH(created_at), SUM(amount) FROM orders WHERE created_at BETWEEN '2020-01-01 00:00:00' AND '2020-12-31 23:59:59' GROUP BY MONTH(created_at);</code></pre> <p> Dadurch würden alle im Jahr 2020 aufgegebenen Bestellungen abgerufen, nach dem Monat ihrer Erstellung gruppiert und 12 Datensätze zurückgegeben, die die Gesamtmenge der Bestellungen in jedem Monat des Jahres anzeigen. </p> <p> Bitte beachten Sie, dass es für eine bessere Indexleistung immer am besten ist, Datumsfunktionen wie <strong> JAHR() </strong> innerhalb der WHERE-Klausel von SQL-Anweisungen und verwenden Sie stattdessen die <strong> ZWISCHEN </strong> Operator wie im obigen Beispiel gezeigt. </p> <p> </p> <h2 id=\"never-be-confused-with-dates-again\"> Nie wieder mit Dates verwechseln </h2> <p> Mit den oben genannten Kenntnissen können Sie jetzt in einer Vielzahl von Anwendungsfällen effizient mit Datums- und Uhrzeitangaben arbeiten, Operationen übersetzen und ausführen. </p> <p> Denken Sie daran, zur Vereinfachung immer UTC zu verwenden, wenn Sie mit Datumsangaben arbeiten, und verwenden Sie die oben genannten Tipps, um Datumsangaben in Ihrer Software effizient zu verwalten, sei es, um einfache Berechnungen durchzuführen oder einfach nach Datumszeiträumen gruppierte Berichte abzurufen. </p> <p> Wenn Sie SQL noch nicht kennen, sollten Sie sich diese ansehen <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> wesentliche SQL-Befehle </a> um Ihre SQL-Nutzung zu verbessern. </p>"}