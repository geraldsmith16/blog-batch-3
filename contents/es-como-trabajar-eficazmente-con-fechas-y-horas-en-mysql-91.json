{"title":"Cómo trabajar eficazmente con fechas y horas en MySQL","content":"<p> Las fechas y los horarios son importantes, ayudan a mantener las cosas organizadas y son un aspecto integral de cualquier operación de software. </p> <p> Trabajar de manera eficiente con ellos dentro de la base de datos a veces puede parecer confuso, ya sea trabajando en varias zonas horarias, agregando / restando fechas y otras operaciones. </p> <p> Conozca las diversas funciones de MySQL disponibles para manejar y administrar fácilmente fechas / horas dentro de su base de datos. </p> <h2 id=\"working-with-time-zones\"> Trabajar con zonas horarias </h2> <p> Para ayudar a mantener las cosas estandarizadas, solo debe trabajar con fechas / horas en la zona horaria UTC. Cada vez que establece una conexión a la base de datos MySQL, debe cambiar la zona horaria a UTC, lo que se puede hacer con la siguiente declaración SQL: </p> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <p> Dado que ahora todas las fechas se guardarán en UTC, siempre sabrá con qué está trabajando, lo que hará las cosas más simples y directas. </p> <p> Cuando sea necesario, puede <a href=\"https://www.makeuseof.com/tag/polytime-time-zone-conversion-app/\" target=\"_blank\" rel=\"nofollow noopener\"> convertir la zona horaria </a> de cualquier valor de fecha y hora / marca de tiempo con el práctico <strong> CONVERT_TZ () </strong> Función MySQL. Primero debe conocer el desplazamiento, por ejemplo, PST en la costa oeste de América del Norte es UTC -08: 00, por lo que podría usar: </p> <pre><code class=\"hljs ruby\">SELECT CONVERT_TZ('2021-02-04 21:47:23', '+0:00', '-8:00');</code></pre> <p> Esto resulta en <strong> 2021-02-04 13:47:23 </strong> que es exactamente correcto. Los tres argumentos pasados ​​a <strong> CONVERT_TZ () </strong> son primero la fecha y hora / marca de tiempo con la que estás comenzando (usa ahora () para la hora actual), el segundo siempre <strong> &#39;+0: 00&#39; </strong> ya que todas las fechas están forzadas a UTC en la base de datos, y el último es el desplazamiento al que deseamos convertir la fecha. </p> <p> </p> <h2 id=\"add-subtract-dates\"> Agregar / restar fechas </h2> <p> Muchas veces necesita sumar o restar fechas, por ejemplo, si necesita recuperar registros de hace una semana, o <a href=\"https://www.makeuseof.com/how-to-use-crontab-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> programar algo </a> dentro de un mes. </p> <p> Afortunadamente, MySQL tiene la excelente <strong> DATE_ADD () </strong> y <strong> DATE_SUB () </strong> funciones que hacen que esta tarea sea extremadamente fácil. Por ejemplo, puede restar dos semanas de la fecha actual con la declaración SQL: </p> <pre><code class=\"hljs\">SELECT DATE_SUB(now(), interval 2 week);</code></pre> <p> Si, en cambio, quisiera agregar tres días a una marca de tiempo existente, usaría: </p> <pre><code class=\"hljs ruby\">SELECT DATE_ADD('2021-02-07 11:52:06', interval 3 day);</code></pre> <p> Ambas funciones funcionan de la misma manera, el primer argumento es la marca de tiempo con la que está comenzando y el segundo argumento es el intervalo para sumar o restar. El segundo argumento siempre tiene el mismo formato comenzando con la palabra <strong> intervalo </strong> seguido de un valor numérico y el intervalo en sí, que puede ser cualquiera de los siguientes: segundo, minuto, hora, día, semana, mes, trimestre, año. </p> <p> Para otro ejemplo, si quisiera recuperar todos los inicios de sesión que ocurrieron en los últimos 34 minutos, podría usar una declaración SQL como: </p> <pre><code class=\"hljs perl\">SELECT * FROM logins WHERE login_date >= DATE_SUB(now(), interval 45 minute);</code></pre> <p> Como puede ver, esto recuperaría todos los registros del <strong> inicios de sesión </strong> tabla con una fecha de inicio de sesión mayor que la hora actual menos 45 minutos, o en otras palabras, los últimos 45 minutos. </p> <p> </p> <h2 id=\"get-difference-between-dates\"> Obtenga la diferencia entre fechas </h2> <p> A veces es necesario saber cuánto tiempo ha transcurrido entre dos fechas. Puede obtener fácilmente el número de días entre dos fechas diferentes con el <strong> DATEDIFF </strong> función, como la siguiente declaración SQL: </p> <pre><code class=\"hljs ruby\">SELECT DATEDIFF(now(), '2020-12-15');</code></pre> <p> La <strong> DATEDIFF </strong> La función toma dos argumentos, los cuales son marcas de fecha / hora y da el número de días entre ellos. El ejemplo anterior mostrará el número de días transcurridos desde el 15 de diciembre de 2020 hasta hoy. </p> <p> Para obtener el número de segundos entre dos fechas, el <strong> TO_SECONDS () </strong> La función puede ser útil, por ejemplo: </p> <pre><code class=\"hljs ruby\">SELECT TO_SECONDS(now()) - TO_SECONDS('2021-02-05 11:56:41');</code></pre> <p> Esto dará como resultado el número de segundos entre las dos fechas proporcionadas. </p> <p> </p> <h2 id=\"extract-segments-from-dates\"> Extraer segmentos de fechas </h2> <p> Hay varias funciones de MySQL que le permiten extraer fácilmente segmentos específicos de fechas, como si solo quisiera el mes, el día del año o la hora. Aquí hay algunos ejemplos de tales funciones: </p> <pre><code class=\"hljs ruby\">SELECT MONTH('2021-02-11 15:27:52');</code></pre> <pre><code class=\"hljs\">SELECT HOUR(now());</code></pre> <pre><code class=\"hljs ruby\">SELECT DAYOFYEAR('2021-07-15 12:00:00');</code></pre> <p> Las declaraciones SQL anteriores resultarían en <strong> 02 </strong> , la hora actual, y <strong> 196 </strong> ya que el 15 de septiembre es el día 196 del año. Aquí hay una lista de todas las funciones de extracción de fecha disponibles, cada una con un solo argumento, de la que se extrae la fecha: </p> <pre><code class=\"hljs perl\">- SECOND()<br>- MINUTE()<br>- HOUR()<br>- DAY()<br>- WEEK() - Number 0 - 52 defining the week within the year.<br>- MONTH()<br>- QUARTER() - Number 1 - 4 defining the quarter of the year.<br>- YEAR()<br>- DAYOFYEAR() - The day of the year (eg. Sept 15th = 196).<br>- LAST_DAY() - The last day in the given month.<br>- DATE() - The date in YYYY-MM-DD format without the time.<br>- TIME() The time in HH:II:SS format without the date.<br>- TO_DAYS() - The number of days since A.D. 0.<br>- TO_SECONDS() - The number of seconds since A.D. 0.<br>- UNIX_TIMESTAMP() - The number of seconds since the epoch (Jan 1st, 1970)</code></pre> <p> Por ejemplo, si tal vez solo desea recuperar el mes y año en que se crearon todos los usuarios, puede usar una declaración SQL como: </p> <pre><code class=\"hljs\">SELECT id, MONTH(created_at), YEAR(created_at) FROM users;</code></pre> <p> Esto recuperaría todos los registros dentro del <strong> usuarios </strong> tabla y muestra el número de identificación, mes y año en el que se creó cada usuario. </p> <p> </p> <h2 id=\"grouping-records-by-date-period\"> Agrupar registros por período de fecha </h2> <p> Un uso excelente de las funciones de fecha es la capacidad de agrupar registros por período de fecha utilizando <strong> AGRUPAR POR </strong> dentro de sus declaraciones SQL. Por ejemplo, tal vez desee extraer la cantidad total de todos los pedidos en 2020 agrupados por mes. Puede usar una declaración SQL como: </p> <pre><code class=\"hljs ruby\">SELECT MONTH(created_at), SUM(amount) FROM orders WHERE created_at BETWEEN '2020-01-01 00:00:00' AND '2020-12-31 23:59:59' GROUP BY MONTH(created_at);</code></pre> <p> Esto recuperaría todos los pedidos realizados en el año 2020, los agruparía por el mes en que se crearon y devolvería 12 registros que muestran la cantidad total solicitada cada mes del año. </p> <p> Tenga en cuenta que para un mejor rendimiento del índice, siempre es mejor evitar el uso de funciones de fecha como <strong> AÑO() </strong> dentro de la cláusula WHERE de las sentencias SQL y, en su lugar, utilice la <strong> ENTRE </strong> operador como se muestra en el ejemplo anterior. </p> <p> </p> <h2 id=\"never-be-confused-with-dates-again\"> Nunca más se confunda con las fechas </h2> <p> Con el conocimiento anterior, ahora puede trabajar, traducir y realizar operaciones de manera eficiente en fechas y horas en una amplia gama de casos de uso. </p> <p> Recuerde siempre usar UTC cuando trabaje con fechas para simplificar, y utilice los consejos anteriores para administrar de manera eficiente las fechas dentro de su software, ya sea para completar cálculos simples o generar informes agrupados por períodos de fecha fácilmente. </p> <p> Si es algo nuevo en SQL, asegúrese de consultar estos <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> comandos SQL esenciales </a> para ayudar a mejorar su uso de SQL. </p>"}