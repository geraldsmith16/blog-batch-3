{"title":"Comment chiffrer et déchiffrer facilement des fichiers et des répertoires sous Linux","content":"<p> Avez-vous déjà voulu crypter rapidement et facilement des fichiers sous Linux sans avoir à installer et à apprendre de nouveaux packages logiciels ? Voici un moyen excellent et facile de crypter facilement des fichiers ou des répertoires via AES256 sécurisés avec un mot de passe, ce qui vous permet de garder vos fichiers à l&#39;abri des regards indiscrets. </p> <h2 id=\"the-basics-of-encryption-with-openssl\"> Les bases du chiffrement avec OpenSSL </h2> <p> Il est important de noter qu&#39;il y a bien plus que cela dans le chiffrement. </p> <p> Il serait peut-être prudent de votre part de lire le <a href=\"https://www.openssl.org/docs/\" target=\"_blank\" rel=\"nofollow noopener\"> Documentation OpenSSL </a> avant de faire confiance à cette méthode avec vos données. Néanmoins, en supposant que vous n&#39;essayez pas d&#39;échapper à la NSA ou à l&#39;armée russe, cette méthode devrait fonctionner parfaitement pour garder vos fichiers et répertoires sécurisés et inaccessibles aux autres. </p> <p> </p> <h2 id=\"install-openssl\"> Installer OpenSSL </h2> <p> Vous avez besoin du populaire package OpenSSL installé, alors vérifiez d&#39;abord s&#39;il est déjà installé avec le <a href=\"https://www.makeuseof.com/basic-commands-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> commande Linux </a> : </p> <pre><code class=\"hljs\">openssl version</code></pre> <p> S&#39;il imprime le numéro de version actuel, vous êtes prêt pour la section suivante. Sinon, si vous recevez une erreur &quot;commande non trouvée&quot;, vous pouvez facilement installer OpenSSL via apt-get : </p> <pre><code class=\"hljs perl\">sudo apt-get -y install openssl</code></pre> <p> </p> <h2 id=\"encrypt-and-decrypt-files\"> Crypter et déchiffrer des fichiers </h2> <p> Par exemple, si vous souhaitez chiffrer un fichier nommé data.tar.gz, vous devez exécuter la commande : </p> <pre><code class=\"hljs\">openssl aes-256-cbc -a -salt -iter 5 -in data.tar.gz -out data.enc</code></pre> <p> Vous serez invité à saisir deux fois un mot de passe de cryptage, qui peut être celui que vous souhaitez. Cette commande entraînera la création d&#39;un nouveau fichier data.enc en tant que fichier nouvellement crypté. Veuillez noter que cela laissera le fichier data.tar.gz d&#39;origine à sa place, alors assurez-vous de le supprimer si nécessaire. </p> <p> Si vous le souhaitez, vous pouvez déchiffrer le fichier data.enc avec la commande : </p> <pre><code class=\"hljs\">openssl aes-256-cbc -d -a -iter 5 -in data.enc -out data_decrypted.tar.gz</code></pre> <p> La commande ci-dessus vous demandera le mot de passe de cryptage, puis générera un fichier data_decrypted.tar.gz contenant la version décryptée de votre fichier. </p> <p> </p> <h2 id=\"encrypt-and-decrypt-directories\"> Crypter et déchiffrer les répertoires </h2> <p> Les commandes de la section ci-dessus fonctionnent très bien pour des fichiers individuels, mais que se passe-t-il si vous souhaitez crypter un répertoire entier ? Il n&#39;y a pas de support intégré dans OpenSSL pour cela, mais grâce à la magie de Linux, ce n&#39;est pas un problème. Par exemple, si vous souhaitez crypter un répertoire nommé &quot;documents&quot;, vous pouvez utiliser la commande : </p> <pre><code class=\"hljs\">tar -cf tmpdata.tar documents && gzip tmpdata.tar && openssl aes-256-cbc -a -salt -iter 5 -in tmpdata.tar.gz -out documents.enc && rm -f tmpdata.tar.gz</code></pre> <p> Un peu d&#39;une bouchée, mais les deux seuls endroits dans la commande ci-dessus que vous devez modifier sont &quot;documents&quot; dans le premier segment qui est le répertoire à chiffrer, et &quot;documents.enc&quot; dans le troisième segment qui est le fichier chiffré résultant. Cette commande archivera le répertoire, le chiffrera, puis supprimera l&#39;archive temporaire créée en laissant à sa place un seul fichier documents.enc chiffré. </p> <p> Décrypter le fichier documents.enc nouvellement créé est tout aussi simple avec la commande : </p> <pre><code class=\"hljs\">openssl aes-256-cbc -d -a -iter 5 -in documents.enc -out tmpdata.tar.gz && tar -xzf tmpdata.tar.gz && rm -f tmpdata.tar.gz</code></pre> <p> La seule partie de la commande ci-dessus que vous devez modifier est &quot;documents.enc&quot; dans le premier segment qui est le nom du fichier crypté. Cette commande vous demandera le mot de passe de chiffrement, procédera au déchiffrement et à la décompression de l&#39;archive, puis supprimera l&#39;archive temporaire en laissant le répertoire déchiffré. </p> <p> </p> <h2 id=\"protect-your-data\"> Protégez vos données </h2> <p> Maintenant que vous savez à quel point il est facile de crypter et décrypter rapidement vos données, mettez vos connaissances à profit et protégez vos données privées et évitez <a href=\"https://www.makeuseof.com/worst-data-breaches/\" target=\"_blank\" rel=\"nofollow noopener\"> violations de données </a> . Encore une fois, pour répéter, le cryptage est bien plus que ce qui est présenté ici et ce qui précède n&#39;est pas destiné à échapper aux forces de l&#39;ordre ou aux pirates informatiques hautement qualifiés et déterminés. </p> <p> Cependant, si vous souhaitez simplement protéger vos données contre les regards indiscrets tels que ceux de votre beau-frère ou du technicien en réparation informatique, les méthodes ci-dessus devraient faire l&#39;affaire à merveille. </p>"}