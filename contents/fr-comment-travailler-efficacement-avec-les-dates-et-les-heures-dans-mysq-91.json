{"title":"Comment travailler efficacement avec les dates et les heures dans MySQL","content":"<p> Les dates et les heures sont importantes, elles aident à garder les choses organisées et font partie intégrante de toute opération logicielle. </p> <p> Travailler efficacement avec eux dans la base de données peut parfois sembler déroutant, qu&#39;il s&#39;agisse de travailler sur différents fuseaux horaires, d&#39;ajouter / soustraire des dates et d&#39;autres opérations. </p> <p> Découvrez les différentes fonctions MySQL disponibles pour gérer et gérer facilement les dates/heures au sein de votre base de données. </p> <h2 id=\"working-with-time-zones\"> Utilisation des fuseaux horaires </h2> <p> Pour aider à garder les choses standardisées, vous ne devriez jamais travailler avec des dates / heures dans le fuseau horaire UTC. Chaque fois que vous établissez une connexion à la base de données MySQL, vous devez changer le fuseau horaire en UTC, ce qui peut être fait avec l&#39;instruction SQL suivante : </p> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <p> Étant donné que toutes les dates seront désormais enregistrées au format UTC, vous savez toujours avec quoi vous travaillez, ce qui rend les choses plus simplistes et simples. </p> <p> Si nécessaire, vous pouvez facilement <a href=\"https://www.makeuseof.com/tag/polytime-time-zone-conversion-app/\" target=\"_blank\" rel=\"nofollow noopener\"> convertir le fuseau horaire </a> de n&#39;importe quelle valeur datetime / timestamp avec le pratique <strong> CONVERT_TZ() </strong> Fonction MySQL. Vous devez d&#39;abord connaître le décalage, par exemple, PST sur la côte ouest de l&#39;Amérique du Nord est UTC -08:00, vous pouvez donc utiliser : </p> <pre><code class=\"hljs ruby\">SELECT CONVERT_TZ('2021-02-04 21:47:23', '+0:00', '-8:00');</code></pre> <p> Cela se traduit par <strong> 2021-02-04 13:47:23 </strong> ce qui est tout à fait correct. Les trois arguments passés à <strong> CONVERT_TZ() </strong> sont d&#39;abord la date/heure avec laquelle vous commencez (utilisez maintenant () pour l&#39;heure actuelle), la seconde sera toujours <strong> &#39;+0:00&#39; </strong> puisque toutes les dates sont forcées à UTC dans la base de données, et la dernière est le décalage vers lequel nous souhaitons convertir la date. </p> <p> </p> <h2 id=\"add-subtract-dates\"> Ajouter / Soustraire des dates </h2> <p> Plusieurs fois, vous devez ajouter ou soustraire des dates, par exemple si vous devez récupérer des enregistrements d&#39;il y a une semaine, ou <a href=\"https://www.makeuseof.com/how-to-use-crontab-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> planifier quelque chose </a> d&#39;ici un mois. </p> <p> Heureusement, MySQL a l&#39;excellent <strong> DATE_ADD() </strong> et <strong> DATE_SUB() </strong> fonctions rendant cette tâche extrêmement facile. Par exemple, vous pouvez soustraire deux semaines à la date actuelle avec l&#39;instruction SQL : </p> <pre><code class=\"hljs\">SELECT DATE_SUB(now(), interval 2 week);</code></pre> <p> Si, à la place, vous vouliez ajouter trois jours à un horodatage existant, vous utiliseriez : </p> <pre><code class=\"hljs ruby\">SELECT DATE_ADD('2021-02-07 11:52:06', interval 3 day);</code></pre> <p> Les deux fonctions fonctionnent de la même manière, le premier argument est l&#39;horodatage avec lequel vous commencez et le deuxième argument est l&#39;intervalle à ajouter ou à soustraire. Le deuxième argument est toujours formaté de la même manière en commençant par le mot <strong> intervalle </strong> suivi d&#39;une valeur numérique et de l&#39;intervalle lui-même, qui peut être l&#39;un des suivants : seconde, minute, heure, jour, semaine, mois, trimestre, année. </p> <p> Pour un autre exemple, si vous souhaitez récupérer toutes les connexions qui se sont produites au cours des 34 dernières minutes, vous pouvez utiliser une instruction SQL telle que : </p> <pre><code class=\"hljs perl\">SELECT * FROM logins WHERE login_date >= DATE_SUB(now(), interval 45 minute);</code></pre> <p> Comme vous pouvez le voir, cela récupèrerait tous les enregistrements du <strong> connexions </strong> table avec une date de connexion supérieure à l&#39;heure actuelle moins 45 minutes, ou en d&#39;autres termes, les 45 dernières minutes. </p> <p> </p> <h2 id=\"get-difference-between-dates\"> Obtenez la différence entre les dates </h2> <p> Parfois, vous devez savoir combien de temps s&#39;est écoulé entre deux dates. Vous pouvez facilement obtenir le nombre de jours entre deux dates différentes avec le <strong> DATE IFF </strong> fonction, telle que l&#39;instruction SQL ci-dessous : </p> <pre><code class=\"hljs ruby\">SELECT DATEDIFF(now(), '2020-12-15');</code></pre> <p> le <strong> DATE IFF </strong> La fonction prend deux arguments, qui sont tous deux des horodatages et donne le nombre de jours entre eux. L&#39;exemple ci-dessus montrera le nombre de jours écoulés entre le 15 décembre 2020 et aujourd&#39;hui. </p> <p> Pour obtenir le nombre de secondes entre deux dates, le <strong> TO_SECONDS() </strong> La fonction peut être utile, par exemple : </p> <pre><code class=\"hljs ruby\">SELECT TO_SECONDS(now()) - TO_SECONDS('2021-02-05 11:56:41');</code></pre> <p> Cela se traduira par le nombre de secondes entre les deux dates fournies. </p> <p> </p> <h2 id=\"extract-segments-from-dates\"> Extraire les segments des dates </h2> <p> Il existe diverses fonctions MySQL qui vous permettent d&#39;extraire facilement des segments spécifiques à partir de dates, par exemple si vous ne vouliez que le mois, le jour de l&#39;année ou l&#39;heure. Voici quelques exemples de telles fonctions : </p> <pre><code class=\"hljs ruby\">SELECT MONTH('2021-02-11 15:27:52');</code></pre> <pre><code class=\"hljs\">SELECT HOUR(now());</code></pre> <pre><code class=\"hljs ruby\">SELECT DAYOFYEAR('2021-07-15 12:00:00');</code></pre> <p> Les instructions SQL ci-dessus entraîneraient <strong> 02 </strong> , l&#39;heure actuelle et <strong> 196 </strong> car le 15 septembre est le 196e jour de l&#39;année. Voici une liste de toutes les fonctions d&#39;extraction de date disponibles, chacune ne prenant qu&#39;un seul argument, la date étant extraite de : </p> <pre><code class=\"hljs perl\">- SECOND()<br>- MINUTE()<br>- HOUR()<br>- DAY()<br>- WEEK() - Number 0 - 52 defining the week within the year.<br>- MONTH()<br>- QUARTER() - Number 1 - 4 defining the quarter of the year.<br>- YEAR()<br>- DAYOFYEAR() - The day of the year (eg. Sept 15th = 196).<br>- LAST_DAY() - The last day in the given month.<br>- DATE() - The date in YYYY-MM-DD format without the time.<br>- TIME() The time in HH:II:SS format without the date.<br>- TO_DAYS() - The number of days since A.D. 0.<br>- TO_SECONDS() - The number of seconds since A.D. 0.<br>- UNIX_TIMESTAMP() - The number of seconds since the epoch (Jan 1st, 1970)</code></pre> <p> Par exemple, si vous souhaitez uniquement récupérer le mois et l&#39;année de création de tous les utilisateurs, vous pouvez utiliser une instruction SQL telle que : </p> <pre><code class=\"hljs\">SELECT id, MONTH(created_at), YEAR(created_at) FROM users;</code></pre> <p> Cela permettrait de récupérer tous les enregistrements dans le <strong> utilisateurs </strong> table et affiche le numéro d&#39;identification, le mois et l&#39;année de création de chaque utilisateur. </p> <p> </p> <h2 id=\"grouping-records-by-date-period\"> Regroupement des enregistrements par période de date </h2> <p> Une excellente utilisation des fonctions de date est la possibilité de regrouper les enregistrements par période de date en utilisant <strong> PAR GROUPE </strong> dans vos instructions SQL. Par exemple, vous souhaitez peut-être extraire le montant total de toutes les commandes en 2020 regroupées par mois. Vous pouvez utiliser une instruction SQL telle que : </p> <pre><code class=\"hljs ruby\">SELECT MONTH(created_at), SUM(amount) FROM orders WHERE created_at BETWEEN '2020-01-01 00:00:00' AND '2020-12-31 23:59:59' GROUP BY MONTH(created_at);</code></pre> <p> Cela permettrait de récupérer toutes les commandes passées au cours de l&#39;année 2020, de les regrouper par mois de création et de renvoyer 12 enregistrements indiquant le montant total commandé chaque mois de l&#39;année. </p> <p> Veuillez noter que pour de meilleures performances d&#39;index, il est toujours préférable d&#39;éviter d&#39;utiliser des fonctions de date telles que <strong> AN() </strong> dans la clause WHERE des instructions SQL, et utilisez à la place le <strong> ENTRE </strong> comme le montre l&#39;exemple ci-dessus. </p> <p> </p> <h2 id=\"never-be-confused-with-dates-again\"> Ne soyez plus jamais confondu avec les dates </h2> <p> En utilisant les connaissances ci-dessus, vous pouvez désormais travailler efficacement, traduire et effectuer des opérations dans les dates et les heures dans un large éventail de cas d&#39;utilisation. </p> <p> N&#39;oubliez pas de toujours utiliser UTC lorsque vous travaillez avec des dates pour plus de simplicité, et utilisez les conseils ci-dessus pour gérer efficacement les dates dans votre logiciel, que ce soit pour effectuer des calculs simples ou extraire facilement des rapports regroupés par périodes de date. </p> <p> Si vous êtes un peu nouveau sur SQL, assurez-vous de vérifier ces <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> commandes SQL essentielles </a> pour vous aider à améliorer votre utilisation de SQL. </p>"}