{"title":"Cara Bekerja Secara Efektif Dengan Tanggal dan Waktu di MySQL","content":"<p> Tanggal dan waktu penting, mereka membantu menjaga segala sesuatunya tetap teratur, dan merupakan aspek integral dari operasi perangkat lunak apa pun. </p> <p> Bekerja secara efisien dengan mereka dalam database terkadang tampak membingungkan, apakah itu bekerja di berbagai zona waktu, menambah/mengurangi tanggal, dan operasi lainnya. </p> <p> Pelajari berbagai fungsi MySQL yang tersedia untuk menangani dan mengelola tanggal/waktu dengan mudah dalam database Anda. </p> <h2 id=\"working-with-time-zones\"> Bekerja Dengan Zona Waktu </h2> <p> Untuk membantu menjaga hal-hal standar, Anda hanya boleh bekerja dengan tanggal / waktu di zona waktu UTC. Setiap kali Anda membuat koneksi ke database MySQL, Anda harus mengalihkan zona waktu ke UTC, yang dapat dilakukan dengan pernyataan SQL berikut: </p> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <p> Karena semua tanggal sekarang akan disimpan dalam UTC, Anda selalu tahu apa yang sedang Anda kerjakan, membuat segalanya lebih sederhana dan mudah. </p> <p> Bila perlu Anda dapat dengan mudah <a href=\"https://www.makeuseof.com/tag/polytime-time-zone-conversion-app/\" target=\"_blank\" rel=\"nofollow noopener\"> mengubah zona waktu time </a> nilai datetime / timestamp apa pun dengan praktis <strong> CONVERT_TZ() </strong> fungsi MySQL. Anda perlu mengetahui offsetnya terlebih dahulu, misalnya PST di pantai barat Amerika Utara adalah UTC -8:00, jadi Anda bisa menggunakan: </p> <pre><code class=\"hljs ruby\">SELECT CONVERT_TZ('2021-02-04 21:47:23', '+0:00', '-8:00');</code></pre> <p> Hal ini mengakibatkan <strong> 2021-02-04 13:47:23 </strong> yang persis benar. Tiga argumen diteruskan ke <strong> CONVERT_TZ() </strong> adalah yang pertama tanggal/stempel waktu yang Anda mulai (gunakan sekarang () untuk waktu saat ini), yang kedua akan selalu <strong> &#39;+0:00&#39; </strong> karena semua tanggal dipaksa ke UTC dalam database, dan yang terakhir adalah offset yang ingin kami ubah menjadi tanggal. </p> <p> </p> <h2 id=\"add-subtract-dates\"> Tambah / Kurangi Tanggal </h2> <p> Sering kali Anda perlu menambah atau mengurangi tanggal, seperti jika Anda perlu mengambil catatan dari seminggu yang lalu, atau <a href=\"https://www.makeuseof.com/how-to-use-crontab-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> menjadwalkan sesuatu </a> sebulan dari sekarang. </p> <p> Untungnya MySQL memiliki yang sangat baik <strong> TANGGAL_TAMBAH() </strong> dan <strong> TANGGAL_SUB() </strong> fungsi membuat tugas ini sangat mudah. Misalnya, Anda dapat mengurangi dua minggu dari tanggal saat ini dengan pernyataan SQL: </p> <pre><code class=\"hljs\">SELECT DATE_SUB(now(), interval 2 week);</code></pre> <p> Jika sebaliknya Anda ingin menambahkan tiga hari ke stempel waktu yang ada, Anda akan menggunakan: </p> <pre><code class=\"hljs ruby\">SELECT DATE_ADD('2021-02-07 11:52:06', interval 3 day);</code></pre> <p> Kedua fungsi bekerja sama, argumen pertama adalah stempel waktu yang Anda gunakan untuk memulai, dan argumen kedua adalah interval untuk menambah atau mengurangi. Argumen kedua selalu diformat sama dimulai dengan kata <strong> selang </strong> diikuti dengan nilai numerik dan interval itu sendiri, yang dapat berupa salah satu dari berikut ini: detik, menit, jam, hari, minggu, bulan, kuartal, tahun. </p> <p> Contoh lain, jika Anda ingin mengambil semua login yang terjadi dalam 34 menit terakhir, Anda dapat menggunakan pernyataan SQL seperti: </p> <pre><code class=\"hljs perl\">SELECT * FROM logins WHERE login_date >= DATE_SUB(now(), interval 45 minute);</code></pre> <p> Seperti yang Anda lihat, ini akan mengambil semua catatan dari <strong> login </strong> tabel dengan tanggal login lebih besar dari waktu sekarang dikurangi 45 menit, atau dengan kata lain, 45 menit terakhir. </p> <p> </p> <h2 id=\"get-difference-between-dates\"> Dapatkan Perbedaan Antara Tanggal </h2> <p> Terkadang Anda perlu mengetahui berapa banyak waktu yang telah berlalu antara dua tanggal. Anda dapat dengan mudah mendapatkan jumlah hari antara dua tanggal yang berbeda dengan <strong> TANGGAL </strong> fungsi, seperti pernyataan SQL di bawah ini: </p> <pre><code class=\"hljs ruby\">SELECT DATEDIFF(now(), '2020-12-15');</code></pre> <p> Itu <strong> TANGGAL </strong> function mengambil dua argumen, keduanya adalah cap tanggal / waktu dan memberikan jumlah hari di antara keduanya. Contoh di atas akan menunjukkan jumlah hari yang telah berlalu dari tanggal 15 Desember 2020 hingga hari ini. </p> <p> Untuk mendapatkan jumlah detik antara dua tanggal, <strong> TO_SECONDS() </strong> fungsi dapat berguna, misalnya: </p> <pre><code class=\"hljs ruby\">SELECT TO_SECONDS(now()) - TO_SECONDS('2021-02-05 11:56:41');</code></pre> <p> Ini akan menghasilkan jumlah detik antara dua tanggal yang disediakan. </p> <p> </p> <h2 id=\"extract-segments-from-dates\"> Ekstrak Segmen Dari Tanggal </h2> <p> Ada berbagai fungsi MySQL yang memungkinkan Anda mengekstrak segmen tertentu dari tanggal dengan mudah, seperti jika Anda hanya menginginkan bulan, hari dalam setahun, atau jam. Berikut adalah beberapa contoh fungsi tersebut: </p> <pre><code class=\"hljs ruby\">SELECT MONTH('2021-02-11 15:27:52');</code></pre> <pre><code class=\"hljs\">SELECT HOUR(now());</code></pre> <pre><code class=\"hljs ruby\">SELECT DAYOFYEAR('2021-07-15 12:00:00');</code></pre> <p> Pernyataan SQL di atas akan menghasilkan <strong> 02 </strong> , jam saat ini, dan <strong> 196 </strong> karena 15 September adalah hari ke 196 dalam setahun. Berikut daftar semua fungsi ekstraksi tanggal yang tersedia, masing-masing hanya mengambil satu argumen, tanggal diekstraksi dari: </p> <pre><code class=\"hljs perl\">- SECOND()<br>- MINUTE()<br>- HOUR()<br>- DAY()<br>- WEEK() - Number 0 - 52 defining the week within the year.<br>- MONTH()<br>- QUARTER()Â - Number 1 - 4 defining the quarter of the year.<br>- YEAR()<br>- DAYOFYEAR() - The day of the year (eg. Sept 15th = 196).<br>- LAST_DAY() - The last day in the given month.<br>- DATE() - The date in YYYY-MM-DD format without the time.<br>- TIME() The time in HH:II:SS format without the date.<br>- TO_DAYS() - The number of days since A.D. 0.<br>- TO_SECONDS() - The number of seconds since A.D. 0.<br>- UNIX_TIMESTAMP() - The number of seconds since the epoch (Jan 1st, 1970)</code></pre> <p> Misalnya, jika mungkin Anda hanya ingin mengambil bulan dan tahun di mana semua pengguna dibuat, Anda dapat menggunakan pernyataan SQL seperti: </p> <pre><code class=\"hljs\">SELECT id, MONTH(created_at), YEAR(created_at) FROM users;</code></pre> <p> Ini akan mengambil semua catatan dalam <strong> pengguna </strong> tabel dan tunjukkan id#, bulan dan tahun setiap pengguna dibuat. </p> <p> </p> <h2 id=\"grouping-records-by-date-period\"> Mengelompokkan Catatan berdasarkan Periode Tanggal </h2> <p> Salah satu penggunaan fungsi tanggal yang sangat baik adalah kemampuan untuk mengelompokkan catatan berdasarkan periode tanggal menggunakan <strong> KELOMPOK OLEH </strong> dalam pernyataan SQL Anda. Misalnya, mungkin Anda ingin menarik jumlah total semua pesanan di tahun 2020 yang dikelompokkan berdasarkan bulan. Anda bisa menggunakan pernyataan SQL seperti: </p> <pre><code class=\"hljs ruby\">SELECT MONTH(created_at), SUM(amount) FROM orders WHERE created_at BETWEEN '2020-01-01 00:00:00' AND '2020-12-31 23:59:59' GROUP BY MONTH(created_at);</code></pre> <p> Ini akan mengambil semua pesanan yang ditempatkan pada tahun 2020, mengelompokkannya berdasarkan bulan pembuatannya, dan mengembalikan 12 catatan yang menunjukkan jumlah total yang dipesan setiap bulan dalam setahun. </p> <p> Harap dicatat, untuk kinerja indeks yang lebih baik, sebaiknya hindari menggunakan fungsi tanggal seperti <strong> TAHUN() </strong> dalam klausa WHERE dari pernyataan SQL, dan sebagai gantinya gunakan use <strong> ANTARA </strong> operator seperti yang ditunjukkan pada contoh di atas. </p> <p> </p> <h2 id=\"never-be-confused-with-dates-again\"> Jangan Bingung Dengan Tanggal Lagi </h2> <p> Dengan menggunakan pengetahuan di atas, Anda sekarang dapat bekerja dengan efisien, menerjemahkan, dan melakukan operasi pada tanggal dan waktu dalam beragam kasus penggunaan. </p> <p> Ingatlah untuk selalu menggunakan UTC saat bekerja dengan tanggal untuk kesederhanaan, dan gunakan tip di atas untuk mengelola tanggal secara efisien dalam perangkat lunak Anda, apakah itu untuk menyelesaikan perhitungan sederhana atau dengan mudah menarik laporan yang dikelompokkan berdasarkan periode tanggal. </p> <p> Jika Anda agak baru dalam SQL, pastikan untuk memeriksa ini <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> perintah SQL penting </a> untuk membantu meningkatkan penggunaan SQL Anda. </p>"}