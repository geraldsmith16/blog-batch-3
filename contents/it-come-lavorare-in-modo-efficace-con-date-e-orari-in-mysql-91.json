{"title":"Come lavorare in modo efficace con date e orari in MySQL","content":"<p> Le date e gli orari sono importanti, aiutano a mantenere le cose organizzate e sono un aspetto integrante di qualsiasi operazione software. </p> <p> Lavorare in modo efficiente con loro all&#39;interno del database a volte può sembrare fonte di confusione, indipendentemente dal fatto che funzioni nei vari fusi orari, aggiungendo/sottraendo date e altre operazioni. </p> <p> Scopri le varie funzioni MySQL disponibili per gestire e gestire facilmente date/orari all&#39;interno del tuo database. </p> <h2 id=\"working-with-time-zones\"> Lavorare con i fusi orari </h2> <p> Per aiutare a mantenere le cose standardizzate, dovresti lavorare solo con date / orari nel fuso orario UTC. Ogni volta che stabilisci una connessione al database MySQL, dovresti cambiare il fuso orario in UTC, cosa che può essere fatta con la seguente istruzione SQL: </p> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <p> Poiché tutte le date verranno ora salvate in UTC, saprai sempre con cosa stai lavorando, rendendo le cose più semplicistiche e dirette. </p> <p> Quando necessario puoi facilmente <a href=\"https://www.makeuseof.com/tag/polytime-time-zone-conversion-app/\" target=\"_blank\" rel=\"nofollow noopener\"> convertire il fuso orario </a> di qualsiasi valore datetime / timestamp con il pratico <strong> CONVERT_TZ() </strong> Funzione MySQL. Devi prima conoscere l&#39;offset, ad esempio, PST sulla costa occidentale del Nord America è UTC -08:00, quindi potresti usare: </p> <pre><code class=\"hljs ruby\">SELECT CONVERT_TZ('2021-02-04 21:47:23', '+0:00', '-8:00');</code></pre> <p> Questo risulta in <strong> 04/02/2021 13:47:23 </strong> che è esattamente corretto. I tre argomenti passati a <strong> CONVERT_TZ() </strong> sono prima la data e l&#39;ora / timestamp con cui stai iniziando (usa now() per l&#39;ora corrente), la seconda sarà sempre <strong> &#39;+0:00&#39; </strong> poiché tutte le date sono forzate all&#39;UTC nel database e l&#39;ultimo è l&#39;offset in cui desideriamo convertire la data. </p> <p> </p> <h2 id=\"add-subtract-dates\"> Aggiungi / Sottrai date </h2> <p> Molte volte è necessario aggiungere o sottrarre date, ad esempio se è necessario recuperare i record di una settimana fa, oppure <a href=\"https://www.makeuseof.com/how-to-use-crontab-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> programma qualcosa </a> un mese da adesso. </p> <p> Per fortuna MySQL ha l&#39;eccellente <strong> DATA_AGGIUNGI() </strong> e <strong> DATA_SUB() </strong> funzioni che rendono questo compito estremamente facile. Ad esempio, puoi sottrarre due settimane dalla data corrente con l&#39;istruzione SQL: </p> <pre><code class=\"hljs\">SELECT DATE_SUB(now(), interval 2 week);</code></pre> <p> Se invece volessi aggiungere tre giorni a un timestamp esistente, useresti: </p> <pre><code class=\"hljs ruby\">SELECT DATE_ADD('2021-02-07 11:52:06', interval 3 day);</code></pre> <p> Entrambe le funzioni funzionano allo stesso modo, il primo argomento è il timestamp con cui si inizia e il secondo argomento è l&#39;intervallo da aggiungere o sottrarre. Il secondo argomento è sempre formattato allo stesso modo iniziando con la parola <strong> intervallo </strong> seguito da un valore numerico e dall&#39;intervallo stesso, che può essere uno dei seguenti: secondo, minuto, ora, giorno, settimana, mese, trimestre, anno. </p> <p> Per un altro esempio, se si desidera recuperare tutti gli accessi avvenuti negli ultimi 34 minuti, è possibile utilizzare un&#39;istruzione SQL come: </p> <pre><code class=\"hljs perl\">SELECT * FROM logins WHERE login_date >= DATE_SUB(now(), interval 45 minute);</code></pre> <p> Come puoi vedere, questo recupererebbe tutti i record dal <strong> accessi </strong> tabella con una data di accesso maggiore dell&#39;ora corrente meno 45 minuti o, in altre parole, degli ultimi 45 minuti. </p> <p> </p> <h2 id=\"get-difference-between-dates\"> Ottieni la differenza tra le date </h2> <p> A volte è necessario ottenere quanto tempo è trascorso tra due date. Puoi facilmente ottenere il numero di giorni tra due date diverse con il <strong> DATEDIFF </strong> funzione, come la seguente istruzione SQL: </p> <pre><code class=\"hljs ruby\">SELECT DATEDIFF(now(), '2020-12-15');</code></pre> <p> Il <strong> DATEDIFF </strong> La funzione accetta due argomenti, entrambi sono data/ora e fornisce il numero di giorni tra di loro. L&#39;esempio sopra mostra il numero di giorni trascorsi dal 15 dicembre 2020 fino ad oggi. </p> <p> Per ottenere il numero di secondi tra due date, il <strong> TO_SECONDS() </strong> la funzione può tornare utile, ad esempio: </p> <pre><code class=\"hljs ruby\">SELECT TO_SECONDS(now()) - TO_SECONDS('2021-02-05 11:56:41');</code></pre> <p> Ciò si tradurrà nel numero di secondi tra le due date fornite. </p> <p> </p> <h2 id=\"extract-segments-from-dates\"> Estrai segmenti dalle date </h2> <p> Esistono varie funzioni MySQL che ti consentono di estrarre facilmente segmenti specifici dalle date, ad esempio se volessi solo il mese, il giorno dell&#39;anno o l&#39;ora. Ecco alcuni esempi di tali funzioni: </p> <pre><code class=\"hljs ruby\">SELECT MONTH('2021-02-11 15:27:52');</code></pre> <pre><code class=\"hljs\">SELECT HOUR(now());</code></pre> <pre><code class=\"hljs ruby\">SELECT DAYOFYEAR('2021-07-15 12:00:00');</code></pre> <p> Le precedenti istruzioni SQL risulteranno in <strong> 02 </strong> , l&#39;ora corrente e <strong> 196 </strong> poiché il 15 settembre è il 196° giorno dell&#39;anno. Ecco un elenco di tutte le funzioni di estrazione della data disponibili, ognuna con un solo argomento, la data viene estratta da: </p> <pre><code class=\"hljs perl\">- SECOND()<br>- MINUTE()<br>- HOUR()<br>- DAY()<br>- WEEK() - Number 0 - 52 defining the week within the year.<br>- MONTH()<br>- QUARTER() - Number 1 - 4 defining the quarter of the year.<br>- YEAR()<br>- DAYOFYEAR() - The day of the year (eg. Sept 15th = 196).<br>- LAST_DAY() - The last day in the given month.<br>- DATE() - The date in YYYY-MM-DD format without the time.<br>- TIME() The time in HH:II:SS format without the date.<br>- TO_DAYS() - The number of days since A.D. 0.<br>- TO_SECONDS() - The number of seconds since A.D. 0.<br>- UNIX_TIMESTAMP() - The number of seconds since the epoch (Jan 1st, 1970)</code></pre> <p> Ad esempio, se si desidera recuperare solo il mese e l&#39;anno in cui sono stati creati tutti gli utenti, è possibile utilizzare un&#39;istruzione SQL come: </p> <pre><code class=\"hljs\">SELECT id, MONTH(created_at), YEAR(created_at) FROM users;</code></pre> <p> Questo recupererebbe tutti i record all&#39;interno del <strong> utenti </strong> tabella e mostra l&#39;id#, il mese e l&#39;anno in cui ogni utente è stato creato. </p> <p> </p> <h2 id=\"grouping-records-by-date-period\"> Raggruppamento dei record per periodo di data </h2> <p> Un ottimo uso delle funzioni di data è la possibilità di raggruppare i record per periodo di data utilizzando <strong> RAGGRUPPA PER </strong> all&#39;interno delle tue istruzioni SQL. Ad esempio, potresti voler estrarre l&#39;importo totale di tutti gli ordini nel 2020 raggruppati per mese. Potresti usare un&#39;istruzione SQL come: </p> <pre><code class=\"hljs ruby\">SELECT MONTH(created_at), SUM(amount) FROM orders WHERE created_at BETWEEN '2020-01-01 00:00:00' AND '2020-12-31 23:59:59' GROUP BY MONTH(created_at);</code></pre> <p> Ciò recupererebbe tutti gli ordini effettuati nell&#39;anno 2020, li raggrupperebbe in base al mese in cui sono stati creati e restituirebbe 12 record che mostrano l&#39;importo totale ordinato ogni mese dell&#39;anno. </p> <p> Si prega di notare, per una migliore performance dell&#39;indice, è sempre meglio evitare di utilizzare funzioni di data come date <strong> ANNO() </strong> all&#39;interno della clausola WHERE delle istruzioni SQL e utilizzare invece il <strong> FRA </strong> operatore come mostrato nell&#39;esempio precedente. </p> <p> </p> <h2 id=\"never-be-confused-with-dates-again\"> Non essere mai più confuso con le date </h2> <p> Utilizzando le conoscenze di cui sopra, ora puoi lavorare, tradurre ed eseguire in modo efficiente operazioni in date e orari in un&#39;ampia gamma di casi d&#39;uso. </p> <p> Ricorda di utilizzare sempre UTC quando lavori con le date per semplicità e utilizza i suggerimenti di cui sopra per gestire in modo efficiente le date all&#39;interno del tuo software, sia che si tratti di completare semplici calcoli o di estrarre facilmente rapporti raggruppati per periodi di data. </p> <p> Se sei un po&#39; nuovo in SQL, assicurati di dare un&#39;occhiata a questi <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> comandi SQL essenziali </a> per aiutarti a migliorare l&#39;uso di SQL. </p>"}