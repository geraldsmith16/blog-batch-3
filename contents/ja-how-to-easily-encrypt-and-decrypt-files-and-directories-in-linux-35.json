{"title":"Linuxでファイルとディレクトリを簡単に暗号化および復号化する方法","content":"<p> 新しいソフトウェアパッケージをインストールして学習することなく、Linuxでファイルをすばやく簡単に暗号化したいと思ったことはありませんか？これは、パスワードで保護されたAES256を介してファイルまたはディレクトリを簡単に暗号化し、ファイルを詮索好きな目から遠ざけるのに役立つ、優れた簡単な方法です。 </p> <h2 id=\"the-basics-of-encryption-with-openssl\"> OpenSSLを使用した暗号化の基本 </h2> <p> 暗号化にはこれ以上のものがあることに注意することが重要です。 </p> <p> を読むのは賢明かもしれません <a href=\"https://www.openssl.org/docs/\" target=\"_blank\" rel=\"nofollow noopener\"> OpenSSLドキュメント </a> このメソッドをデータで信頼する前に。それでも、NSAやロシア軍を回避しようとしていないと仮定すると、この方法は、ファイルやディレクトリを安全に保ち、他の人がアクセスできないようにするために完全に機能するはずです。 </p> <p> </p> <h2 id=\"install-openssl\"> OpenSSLをインストールします </h2> <p> 人気のあるOpenSSLパッケージをインストールする必要があるため、最初に、 <a href=\"https://www.makeuseof.com/basic-commands-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> Linuxコマンド </a> ： </p> <pre><code class=\"hljs\">openssl version</code></pre> <p> 現在のバージョン番号が出力されれば、次のセクションに進むことができます。そうしないと、「コマンドが見つかりません」というエラーが表示された場合、apt-getを使用してOpenSSLを簡単にインストールできます。 </p> <pre><code class=\"hljs perl\">sudo apt-get -y install openssl</code></pre> <p> </p> <h2 id=\"encrypt-and-decrypt-files\"> ファイルの暗号化と復号化 </h2> <p> たとえば、data.tar.gzという名前のファイルを暗号化する場合は、次のコマンドを実行します。 </p> <pre><code class=\"hljs\">openssl aes-256-cbc -a -salt -iter 5 -in data.tar.gz -out data.enc</code></pre> <p> 暗号化パスワードを2回入力するように求められますが、これは任意のパスワードにすることができます。このコマンドにより、新しく暗号化されたファイルとして新しいdata.encファイルが作成されます。元のdata.tar.gzファイルがそのまま残るので、必要に応じて削除してください。 </p> <p> 必要に応じて、次のコマンドを使用してdata.encファイルを復号化できます。 </p> <pre><code class=\"hljs\">openssl aes-256-cbc -d -a -iter 5 -in data.enc -out data_decrypted.tar.gz</code></pre> <p> 上記のコマンドは、暗号化パスワードの入力を求めるプロンプトを表示し、ファイルの復号化されたバージョンを含むdata_decrypted.tar.gzファイルになります。 </p> <p> </p> <h2 id=\"encrypt-and-decrypt-directories\"> ディレクトリの暗号化と復号化 </h2> <p> 上記のセクションのコマンドは個々のファイルに最適ですが、ディレクトリ全体を暗号化する場合はどうなりますか？これに対するOpenSSLの組み込みサポートはありませんが、Linuxの魔法のおかげで、これは問題ありません。たとえば、「documents」という名前のディレクトリを暗号化する場合は、次のコマンドを使用できます。 </p> <pre><code class=\"hljs\">tar -cf tmpdata.tar documents && gzip tmpdata.tar && openssl aes-256-cbc -a -salt -iter 5 -in tmpdata.tar.gz -out documents.enc && rm -f tmpdata.tar.gz</code></pre> <p> 一口ですが、上記のコマンドで変更する必要があるのは、暗号化するディレクトリである最初のセグメントの「documents」と、結果の暗号化ファイルである3番目のセグメントの「documents.enc」の2つだけです。このコマンドは、ディレクトリをアーカイブして暗号化し、作成された一時アーカイブを削除して、暗号化された単一のdocuments.encファイルをその場所に残します。 </p> <p> 新しく作成されたdocuments.encファイルの復号化は、次のコマンドで同じように簡単です。 </p> <pre><code class=\"hljs\">openssl aes-256-cbc -d -a -iter 5 -in documents.enc -out tmpdata.tar.gz && tar -xzf tmpdata.tar.gz && rm -f tmpdata.tar.gz</code></pre> <p> 上記のコマンドで変更する必要があるのは、暗号化されたファイルの名前である最初のセグメントの「documents.enc」だけです。このコマンドは、暗号化パスワードの入力を求め、アーカイブの復号化と解凍に進み、一時アーカイブを削除して、結果として復号化されたディレクトリを残します。 </p> <p> </p> <h2 id=\"protect-your-data\"> データを保護する </h2> <p> データをすばやく暗号化および復号化することがいかに簡単であるかがわかったので、知識を活用してプライベートデータを安全に保ち、回避します。 <a href=\"https://www.makeuseof.com/worst-data-breaches/\" target=\"_blank\" rel=\"nofollow noopener\"> データ漏えい </a> 。繰り返しになりますが、暗号化にはここに示されている以上のものがあり、上記は法執行機関や高度なスキルと決意を持ったハッカーを回避するためのものではありません。 </p> <p> ただし、義理の兄弟やコンピューター修理技術者のような詮索好きな目からデータを保護したいだけの場合は、上記の方法でうまくいくはずです。 </p>"}