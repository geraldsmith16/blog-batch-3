{"title":"MySQLで日付と時刻を効果的に操作する方法","content":"<p> 日付と時刻は重要であり、物事を整理するのに役立ち、ソフトウェア操作の不可欠な側面です。 </p> <p> データベース内でそれらを効率的に操作することは、さまざまなタイムゾーンで機能しているかどうか、日付の加算/減算、およびその他の操作であるかどうかにかかわらず、混乱するように見えることがあります。 </p> <p> データベース内の日付/時刻を簡単に処理および管理するために使用できるさまざまなMySQL関数について学習します。 </p> <h2 id=\"working-with-time-zones\"> タイムゾーンの操作 </h2> <p> 物事を標準化するために、UTCタイムゾーンの日付/時刻のみを操作する必要があります。 MySQLデータベースへの接続を確立するたびに、タイムゾーンをUTCに切り替える必要があります。これは、次のSQLステートメントで実行できます。 </p> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <p> すべての日付がUTCで保存されるようになったため、作業内容が常にわかり、作業がより単純でわかりやすくなります。 </p> <p> 必要に応じて簡単にできます <a href=\"https://www.makeuseof.com/tag/polytime-time-zone-conversion-app/\" target=\"_blank\" rel=\"nofollow noopener\"> タイムゾーンを変換する </a> 便利な日時/タイムスタンプ値の <strong> CONVERT_TZ（） </strong> MySQL関数。最初にオフセットを知る必要があります。たとえば、北米の西海岸のPSTはUTC -08：00なので、次を使用できます。 </p> <pre><code class=\"hljs ruby\">SELECT CONVERT_TZ('2021-02-04 21:47:23', '+0:00', '-8:00');</code></pre> <p> これにより、 <strong> 2021-02-04 13:47:23 </strong> これは正確に正しいです。に渡された3つの引数 <strong> CONVERT_TZ（） </strong> 最初は開始する日時/タイムスタンプ（現在の時刻にはnow（）を使用）であり、2番目は常に <strong> &#39;+0：00&#39; </strong> データベースではすべての日付がUTCに強制され、最後が日付を変換するオフセットであるためです。 </p> <p> </p> <h2 id=\"add-subtract-dates\"> 日付の加算/減算 </h2> <p> 1週間前のレコードを取得する必要がある場合など、日付を加算または減算する必要がある場合がよくあります。 <a href=\"https://www.makeuseof.com/how-to-use-crontab-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> 何かをスケジュールする </a> 今から一ヶ月。 </p> <p> ありがたいことに、MySQLには優れた機能があります <strong> DATE_ADD（） </strong> そして <strong> DATE_SUB（） </strong> このタスクを非常に簡単にする機能。たとえば、SQLステートメントを使用して現在の日付から2週間を引くことができます。 </p> <pre><code class=\"hljs\">SELECT DATE_SUB(now(), interval 2 week);</code></pre> <p> 代わりに、既存のタイムスタンプに3日を追加する場合は、次を使用します。 </p> <pre><code class=\"hljs ruby\">SELECT DATE_ADD('2021-02-07 11:52:06', interval 3 day);</code></pre> <p> 両方の関数は同じように機能し、最初の引数は開始するタイムスタンプであり、2番目の引数は加算または減算する間隔です。 2番目の引数は、単語で始まる常に同じ形式になります <strong> 間隔 </strong> その後に数値と間隔自体が続きます。これは、秒、分、時間、日、週、月、四半期、年のいずれかになります。 </p> <p> 別の例として、過去34分間に発生したすべてのログインを取得する場合は、次のようなSQLステートメントを使用できます。 </p> <pre><code class=\"hljs perl\">SELECT * FROM logins WHERE login_date >= DATE_SUB(now(), interval 45 minute);</code></pre> <p> ご覧のとおり、これにより、からすべてのレコードが取得されます。 <strong> ログイン </strong> ログイン日付が現在の時刻から45分を引いた値、つまり過去45分よりも大きいテーブル。 </p> <p> </p> <h2 id=\"get-difference-between-dates\"> 日付の違いを取得する </h2> <p> 2つの日付の間に経過した時間を取得する必要がある場合があります。あなたは簡単に2つの異なる日付の間の日数を得ることができます <strong> DATEDIFF </strong> 以下のSQLステートメントなどの関数： </p> <pre><code class=\"hljs ruby\">SELECT DATEDIFF(now(), '2020-12-15');</code></pre> <p> ザ・ <strong> DATEDIFF </strong> 関数は2つの引数を取ります。どちらも日付/タイムスタンプであり、それらの間の日数を示します。上記の例は、2020年12月15日から今日までの経過日数を示しています。 </p> <p> 2つの日付の間の秒数を取得するには、 <strong> TO_SECONDS（） </strong> 関数は次のように役立ちます。 </p> <pre><code class=\"hljs ruby\">SELECT TO_SECONDS(now()) - TO_SECONDS('2021-02-05 11:56:41');</code></pre> <p> これにより、指定された2つの日付の間の秒数が得られます。 </p> <p> </p> <h2 id=\"extract-segments-from-dates\"> 日付からセグメントを抽出する </h2> <p> 月、日、時間のみが必要な場合など、日付から特定のセグメントを簡単に抽出できるさまざまなMySQL関数があります。このような関数の例をいくつか示します。 </p> <pre><code class=\"hljs ruby\">SELECT MONTH('2021-02-11 15:27:52');</code></pre> <pre><code class=\"hljs\">SELECT HOUR(now());</code></pre> <pre><code class=\"hljs ruby\">SELECT DAYOFYEAR('2021-07-15 12:00:00');</code></pre> <p> 上記のSQLステートメントは次のようになります <strong> 02 </strong> 、現在の時間、および <strong> 196 </strong> 9月15日はその年の196日目です。使用可能なすべての日付抽出関数のリストを次に示します。それぞれが1つの引数のみを取り、日付は次の場所から抽出されます。 </p> <pre><code class=\"hljs perl\">- SECOND()<br>- MINUTE()<br>- HOUR()<br>- DAY()<br>- WEEK() - Number 0 - 52 defining the week within the year.<br>- MONTH()<br>- QUARTER() - Number 1 - 4 defining the quarter of the year.<br>- YEAR()<br>- DAYOFYEAR() - The day of the year (eg. Sept 15th = 196).<br>- LAST_DAY() - The last day in the given month.<br>- DATE() - The date in YYYY-MM-DD format without the time.<br>- TIME() The time in HH:II:SS format without the date.<br>- TO_DAYS() - The number of days since A.D. 0.<br>- TO_SECONDS() - The number of seconds since A.D. 0.<br>- UNIX_TIMESTAMP() - The number of seconds since the epoch (Jan 1st, 1970)</code></pre> <p> たとえば、すべてのユーザーが作成された月と年のみを取得したい場合は、次のようなSQLステートメントを使用できます。 </p> <pre><code class=\"hljs\">SELECT id, MONTH(created_at), YEAR(created_at) FROM users;</code></pre> <p> これにより、内のすべてのレコードが取得されます <strong> ユーザー </strong> 表を作成し、各ユーザーが作成されたID番号、月、年を表示します。 </p> <p> </p> <h2 id=\"grouping-records-by-date-period\"> 日付期間によるレコードのグループ化 </h2> <p> 日付関数の優れた使用法の1つは、を使用して日付期間ごとにレコードをグループ化する機能です。 <strong> GROUP BY </strong> SQLステートメント内。たとえば、2020年のすべての注文の合計金額を月ごとにグループ化して取得したい場合があります。次のようなSQLステートメントを使用できます。 </p> <pre><code class=\"hljs ruby\">SELECT MONTH(created_at), SUM(amount) FROM orders WHERE created_at BETWEEN '2020-01-01 00:00:00' AND '2020-12-31 23:59:59' GROUP BY MONTH(created_at);</code></pre> <p> これにより、2020年に行われたすべての注文が取得され、作成された月ごとにグループ化され、その年の各月に注文された合計金額を示す12個のレコードが返されます。 </p> <p> インデックスのパフォーマンスを向上させるには、次のような日付関数の使用を避けることが常に最善であることに注意してください。 <strong> 年（） </strong> SQLステートメントのWHERE句内で、代わりに <strong> の間に </strong> 上記の例に示されている演算子。 </p> <p> </p> <h2 id=\"never-be-confused-with-dates-again\"> 二度と日付と混同しないでください </h2> <p> 上記の知識を使用すると、さまざまなユースケースで日付と時刻の操作を効率的に処理、変換、実行できるようになります。 </p> <p> 簡単にするために日付を操作するときは常にUTCを使用することを忘れないでください。簡単な計算を完了する場合でも、日付期間ごとにグループ化されたレポートを簡単に取得する場合でも、上記のヒントを利用してソフトウェア内の日付を効率的に管理してください。 </p> <p> SQLを初めて使用する場合は、必ずこれらを確認してください。 <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> 重要なSQLコマンド </a> SQLの使用を改善するのに役立ちます。 </p>"}