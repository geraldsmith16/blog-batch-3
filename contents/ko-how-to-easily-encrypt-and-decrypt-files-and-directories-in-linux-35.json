{"title":"Linux에서 파일 및 디렉터리를 쉽게 암호화 및 해독하는 방법","content":"<p> 새 소프트웨어 패키지를 설치하고 배울 필요없이 Linux에서 파일을 빠르고 쉽게 암호화하고 싶었던 적이 있습니까? 다음은 암호로 보호 된 AES256을 통해 파일 또는 디렉토리를 쉽게 암호화 할 수있는 훌륭하고 쉬운 방법으로, 파일이 눈에 띄지 않도록 보호합니다. </p> <h2 id=\"the-basics-of-encryption-with-openssl\"> OpenSSL을 사용한 암호화의 기본 사항 </h2> <p> 암호화에는 이보다 훨씬 더 많은 것이 있다는 점에 유의해야합니다. </p> <p> 다음을 읽는 것이 현명 할 수 있습니다. <a href=\"https://www.openssl.org/docs/\" target=\"_blank\" rel=\"nofollow noopener\"> OpenSSL 문서 </a> 이 방법을 데이터로 신뢰하기 전에. 그럼에도 불구하고 NSA 또는 러시아 군대를 회피하지 않는다고 가정하면이 방법은 파일과 디렉토리를 안전하게 유지하고 다른 사람이 액세스 할 수 없도록 완벽하게 작동합니다. </p> <p> </p> <h2 id=\"install-openssl\"> OpenSSL 설치 </h2> <p> 인기있는 OpenSSL 패키지가 설치되어 있어야하므로 먼저 이미 설치되어 있는지 확인하십시오. <a href=\"https://www.makeuseof.com/basic-commands-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> Linux 명령 </a> : </p> <pre><code class=\"hljs\">openssl version</code></pre> <p> 현재 버전 번호가 인쇄되면 다음 섹션에 대한 모든 설정이 완료된 것입니다. 그렇지 않고 &quot;명령을 찾을 수 없음&quot;오류가 발생하면 apt-get을 통해 OpenSSL을 쉽게 설치할 수 있습니다. </p> <pre><code class=\"hljs perl\">sudo apt-get -y install openssl</code></pre> <p> </p> <h2 id=\"encrypt-and-decrypt-files\"> 파일 암호화 및 복호화 </h2> <p> 예를 들어 data.tar.gz라는 파일을 암호화하려면 다음 명령을 실행합니다. </p> <pre><code class=\"hljs\">openssl aes-256-cbc -a -salt -iter 5 -in data.tar.gz -out data.enc</code></pre> <p> 원하는대로 암호화 암호를 두 번 입력하라는 메시지가 표시됩니다. 이 명령은 새로 암호화 된 파일로 새 data.enc 파일을 생성합니다. 원본 data.tar.gz 파일은 그대로 유지되므로 필요한 경우 삭제하십시오. </p> <p> 원하는 경우 다음 명령을 사용하여 data.enc 파일을 해독 할 수 있습니다. </p> <pre><code class=\"hljs\">openssl aes-256-cbc -d -a -iter 5 -in data.enc -out data_decrypted.tar.gz</code></pre> <p> 위의 명령은 암호화 암호를 묻는 메시지를 표시 한 다음 파일의 복호화 된 버전이 포함 된 data_decrypted.tar.gz 파일을 생성합니다. </p> <p> </p> <h2 id=\"encrypt-and-decrypt-directories\"> 디렉토리 암호화 및 복호화 </h2> <p> 위 섹션의 명령은 개별 파일에 대해 잘 작동하지만 전체 디렉토리를 암호화하려는 경우 어떻게됩니까? 이를 위해 OpenSSL에 내장 된 지원은 없지만 Linux의 마법 덕분에 문제가되지 않습니다. 예를 들어 &quot;documents&quot;라는 디렉토리를 암호화하려면 다음 명령을 사용할 수 있습니다. </p> <pre><code class=\"hljs\">tar -cf tmpdata.tar documents && gzip tmpdata.tar && openssl aes-256-cbc -a -salt -iter 5 -in tmpdata.tar.gz -out documents.enc && rm -f tmpdata.tar.gz</code></pre> <p> 약간의 입맛이 있지만, 위 명령에서 수정해야 할 유일한 두 위치는 암호화 할 디렉토리 인 첫 번째 세그먼트의 &quot;documents&quot;와 결과로 암호화 된 파일 인 세 번째 세그먼트의 &quot;documents.enc&quot;입니다. 이 명령은 디렉토리를 아카이브하고 암호화 한 다음 생성 된 임시 아카이브를 삭제하고 그 자리에 하나의 암호화 된 documents.enc 파일을 남깁니다. </p> <p> 새로 생성 된 documents.enc 파일의 복호화는 다음 명령을 사용하는 것만 큼 쉽습니다. </p> <pre><code class=\"hljs\">openssl aes-256-cbc -d -a -iter 5 -in documents.enc -out tmpdata.tar.gz && tar -xzf tmpdata.tar.gz && rm -f tmpdata.tar.gz</code></pre> <p> 위 명령에서 수정해야하는 유일한 부분은 암호화 된 파일의 이름 인 첫 번째 세그먼트에있는 &quot;documents.enc&quot;입니다. 이 명령은 암호화 암호를 입력하라는 메시지를 표시하고 아카이브의 암호를 해독하고 압축을 푼 다음 결과적으로 해독 된 디렉토리를 떠나 임시 아카이브를 삭제합니다. </p> <p> </p> <h2 id=\"protect-your-data\"> 데이터 보호 </h2> <p> 이제 데이터를 신속하게 암호화 및 해독하는 것이 얼마나 쉬운 지 알았으므로 이제 지식을 활용하여 개인 데이터를 안전하게 유지하고 <a href=\"https://www.makeuseof.com/worst-data-breaches/\" target=\"_blank\" rel=\"nofollow noopener\"> 데이터 침해 </a> . 다시 말하지만, 여기에 제시된 것보다 훨씬 더 많은 암호화가 있으며 위의 내용은 법 집행 기관이나 고도로 숙련되고 단호한 해커를 회피하기위한 것이 아닙니다. </p> <p> 그러나 단순히 처남이나 컴퓨터 수리 기술자와 같은 눈에 띄는 눈으로부터 데이터를 보호하려면 위의 방법이 트릭을 아름답게 수행해야합니다. </p>"}