{"title":"MySQL에서 날짜 및 시간을 효과적으로 사용하는 방법","content":"<p> 날짜와 시간은 중요하며 모든 것을 정리하는 데 도움이되며 모든 소프트웨어 작업의 필수 요소입니다. </p> <p> 데이터베이스 내에서 효율적으로 작업하는 것은 다양한 시간대에서 작동하는지, 날짜 추가 / 빼기 및 기타 작업이든간에 때때로 혼란스러워 보일 수 있습니다. </p> <p> 데이터베이스 내에서 날짜 / 시간을 쉽게 처리하고 관리 할 수있는 다양한 MySQL 기능에 대해 알아보십시오. </p> <h2 id=\"working-with-time-zones\"> 시간대 작업 </h2> <p> 표준화 된 상태를 유지하려면 UTC 시간대의 날짜 / 시간으로 만 작업해야합니다. MySQL 데이터베이스에 연결할 때마다 시간대를 UTC로 전환해야합니다.이 작업은 다음 SQL 문으로 수행 할 수 있습니다. </p> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <p> 이제 모든 날짜가 UTC로 저장되므로 작업중인 작업을 항상 알 수 있으므로보다 간단하고 간단하게 작업 할 수 있습니다. </p> <p> 필요한 경우 쉽게 <a href=\"https://www.makeuseof.com/tag/polytime-time-zone-conversion-app/\" target=\"_blank\" rel=\"nofollow noopener\"> 시간대 변환 </a> 편리한 날짜 시간 / 타임 스탬프 값 <strong> CONVERT_TZ () </strong> MySQL 기능. 먼저 오프셋을 알아야합니다. 예를 들어 북미 서부 해안의 PST는 UTC -08 : 00이므로 다음을 사용할 수 있습니다. </p> <pre><code class=\"hljs ruby\">SELECT CONVERT_TZ('2021-02-04 21:47:23', '+0:00', '-8:00');</code></pre> <p> 결과 <strong> 2021-02-04 13:47:23 </strong> 정확히 맞습니다. 전달 된 세 가지 인수 <strong> CONVERT_TZ () </strong> 첫 번째는 시작하는 날짜 / 타임 스탬프 (현재 시간에 now () 사용)이고, 두 번째는 항상 <strong> &#39;+0 : 00&#39; </strong> 모든 날짜는 데이터베이스에서 UTC로 강제되며 마지막 날짜는 날짜를 변환하려는 오프셋입니다. </p> <p> </p> <h2 id=\"add-subtract-dates\"> 날짜 더하기 / 빼기 </h2> <p> 일주일 전의 레코드를 검색해야하는 경우와 같이 날짜를 더하거나 빼야하는 경우가 많습니다. <a href=\"https://www.makeuseof.com/how-to-use-crontab-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> 일정을 잡다 </a> 지금부터 한 달. </p> <p> 고맙게도 MySQL은 <strong> DATE_ADD () </strong> 과 <strong> DATE_SUB () </strong> 이 작업을 매우 쉽게 만드는 기능. 예를 들어, SQL 문을 사용하여 현재 날짜에서 2 주를 뺄 수 있습니다. </p> <pre><code class=\"hljs\">SELECT DATE_SUB(now(), interval 2 week);</code></pre> <p> 대신 기존 타임 스탬프에 3 일을 추가하려면 다음을 사용합니다. </p> <pre><code class=\"hljs ruby\">SELECT DATE_ADD('2021-02-07 11:52:06', interval 3 day);</code></pre> <p> 두 함수 모두 동일하게 작동하며 첫 번째 인수는 시작하는 타임 스탬프이며 두 번째 인수는 더하거나 뺄 간격입니다. 두 번째 인수는 항상 단어로 시작하는 동일한 형식으로 지정됩니다. <strong> 간격 </strong> 숫자 값과 간격 자체가 뒤 따르며 초, 분,시, 일, 주, 월, 분기, 연도 중 하나 일 수 있습니다. </p> <p> 다른 예로, 지난 34 분 동안 발생한 모든 로그인을 검색하려는 경우 다음과 같은 SQL 문을 사용할 수 있습니다. </p> <pre><code class=\"hljs perl\">SELECT * FROM logins WHERE login_date >= DATE_SUB(now(), interval 45 minute);</code></pre> <p> 보시다시피 이것은 모든 레코드를 검색합니다. <strong> 로그인 </strong> 로그인 날짜가 현재 시간에서 45 분을 뺀 값, 즉 지난 45 분보다 큰 테이블입니다. </p> <p> </p> <h2 id=\"get-difference-between-dates\"> 날짜 차이 얻기 </h2> <p> 때로는 두 날짜 사이에 얼마나 많은 시간이 경과했는지 알아야합니다. 두 개의 다른 날짜 사이의 일 수를 쉽게 얻을 수 있습니다. <strong> DATEDIFF </strong> 아래 SQL 문과 같은 함수 : </p> <pre><code class=\"hljs ruby\">SELECT DATEDIFF(now(), '2020-12-15');</code></pre> <p> 그만큼 <strong> DATEDIFF </strong> 함수는 두 개의 인수를 취하며, 둘 다 날짜 / 시간 소인이며 그 사이의 일 수를 제공합니다. 위의 예는 2020 년 12 월 15 일부터 오늘까지의 경과 일수를 보여줍니다. </p> <p> 두 날짜 사이의 시간 (초)을 얻으려면 <strong> TO_SECONDS () </strong> 함수는 다음과 같이 유용 할 수 있습니다. </p> <pre><code class=\"hljs ruby\">SELECT TO_SECONDS(now()) - TO_SECONDS('2021-02-05 11:56:41');</code></pre> <p> 그러면 제공된 두 날짜 사이의 시간 (초)이 생성됩니다. </p> <p> </p> <h2 id=\"extract-segments-from-dates\"> 날짜에서 세그먼트 추출 </h2> <p> 월, 일 또는 시간 만 원하는 경우와 같이 날짜에서 특정 세그먼트를 쉽게 추출 할 수있는 다양한 MySQL 함수가 있습니다. 다음은 이러한 기능의 몇 가지 예입니다. </p> <pre><code class=\"hljs ruby\">SELECT MONTH('2021-02-11 15:27:52');</code></pre> <pre><code class=\"hljs\">SELECT HOUR(now());</code></pre> <pre><code class=\"hljs ruby\">SELECT DAYOFYEAR('2021-07-15 12:00:00');</code></pre> <p> 위의 SQL 문은 <strong> 02 </strong> , 현재 시간 및 <strong> 196 </strong> 9 월 15 일은 올해의 196 일입니다. 다음은 사용 가능한 모든 날짜 추출 함수의 목록입니다. 각 함수는 하나의 인수 만 취하며 날짜는 다음에서 추출됩니다. </p> <pre><code class=\"hljs perl\">- SECOND()<br>- MINUTE()<br>- HOUR()<br>- DAY()<br>- WEEK() - Number 0 - 52 defining the week within the year.<br>- MONTH()<br>- QUARTER() - Number 1 - 4 defining the quarter of the year.<br>- YEAR()<br>- DAYOFYEAR() - The day of the year (eg. Sept 15th = 196).<br>- LAST_DAY() - The last day in the given month.<br>- DATE() - The date in YYYY-MM-DD format without the time.<br>- TIME() The time in HH:II:SS format without the date.<br>- TO_DAYS() - The number of days since A.D. 0.<br>- TO_SECONDS() - The number of seconds since A.D. 0.<br>- UNIX_TIMESTAMP() - The number of seconds since the epoch (Jan 1st, 1970)</code></pre> <p> 예를 들어, 모든 사용자가 생성 된 월과 연도 만 검색하려는 경우 다음과 같은 SQL 문을 사용할 수 있습니다. </p> <pre><code class=\"hljs\">SELECT id, MONTH(created_at), YEAR(created_at) FROM users;</code></pre> <p> 이것은 내의 모든 레코드를 검색합니다. <strong> 사용자 </strong> 테이블과 각 사용자가 생성 된 ID #, 월 및 연도를 표시합니다. </p> <p> </p> <h2 id=\"grouping-records-by-date-period\"> 날짜 기간별로 레코드 그룹화 </h2> <p> 날짜 함수의 한 가지 뛰어난 사용은 다음을 사용하여 날짜 기간별로 레코드를 그룹화하는 기능입니다. <strong> 그룹화 </strong> SQL 문 내에서. 예를 들어 2020 년 모든 주문의 총 금액을 월별로 그룹화하고 싶을 수 있습니다. 다음과 같은 SQL 문을 사용할 수 있습니다. </p> <pre><code class=\"hljs ruby\">SELECT MONTH(created_at), SUM(amount) FROM orders WHERE created_at BETWEEN '2020-01-01 00:00:00' AND '2020-12-31 23:59:59' GROUP BY MONTH(created_at);</code></pre> <p> 이렇게하면 2020 년에 접수 된 모든 주문을 검색하고, 생성 된 월별로 그룹화하고, 매월 주문한 총 금액을 보여주는 12 개의 레코드를 반환합니다. </p> <p> 더 나은 인덱스 성능을 위해 항상 다음과 같은 날짜 함수를 사용하지 않는 것이 가장 좋습니다. <strong> 년() </strong> SQL 문의 WHERE 절 내에서 대신 <strong> 중에서 </strong> 위의 예와 같이 연산자. </p> <p> </p> <h2 id=\"never-be-confused-with-dates-again\"> 다시 날짜와 혼동하지 마십시오 </h2> <p> 위의 지식을 사용하여 이제 다양한 사용 사례에서 날짜와 시간으로 효율적으로 작업, 변환 및 작업을 수행 할 수 있습니다. </p> <p> 단순성을 위해 날짜로 작업 할 때는 항상 UTC를 사용하고, 간단한 계산을 완료하거나 날짜 기간별로 그룹화 된 보고서를 쉽게 가져올 때 위의 팁을 활용하여 소프트웨어 내의 날짜를 효율적으로 관리하십시오. </p> <p> SQL에 익숙하지 않은 경우 다음을 확인하십시오. <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> 필수 SQL 명령 </a> SQL 사용을 개선하는 데 도움이됩니다. </p>"}