{"title":"Jak efektywnie pracować z datami i godzinami w MySQL","content":"<p> Daty i godziny są ważne, pomagają utrzymać porządek i są integralnym aspektem każdej operacji oprogramowania. </p> <p> Wydajna praca z nimi w bazie danych może czasami wydawać się myląca, niezależnie od tego, czy chodzi o różne strefy czasowe, dodawanie/odejmowanie dat i inne operacje. </p> <p> Poznaj różne dostępne funkcje MySQL, aby łatwo obsługiwać i zarządzać datami/godzinami w Twojej bazie danych. </p> <h2 id=\"working-with-time-zones\"> Praca ze strefami czasowymi </h2> <p> Aby zachować standaryzację, powinieneś pracować tylko z datami / godzinami w strefie czasowej UTC. Za każdym razem, gdy nawiązujesz połączenie z bazą danych MySQL, powinieneś przełączyć strefę czasową na UTC, co można zrobić za pomocą następującej instrukcji SQL: </p> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <p> Ponieważ wszystkie daty będą teraz zapisywane w UTC, zawsze wiesz, z czym pracujesz, dzięki czemu wszystko jest bardziej uproszczone i proste. </p> <p> W razie potrzeby możesz łatwo <a href=\"https://www.makeuseof.com/tag/polytime-time-zone-conversion-app/\" target=\"_blank\" rel=\"nofollow noopener\"> przekształć strefę czasową </a> o dowolnej wartości daty i godziny / znacznika czasu z poręcznym <strong> KONWERSJA_TZ() </strong> Funkcja MySQL. Najpierw musisz znać przesunięcie, na przykład PST na zachodnim wybrzeżu Ameryki Północnej to UTC -08:00, więc możesz użyć: </p> <pre><code class=\"hljs ruby\">SELECT CONVERT_TZ('2021-02-04 21:47:23', '+0:00', '-8:00');</code></pre> <p> To skutkuje <strong> 2021-02-04 13:47:23 </strong> co jest dokładnie poprawne. Trzy argumenty przekazane do <strong> KONWERSJA_TZ() </strong> to pierwsza data i godzina / znacznik czasu, od której zaczynasz (użyj now() dla bieżącego czasu), druga zawsze będzie <strong> &#39;+0:00&#39; </strong> ponieważ wszystkie daty w bazie danych są wymuszane do czasu UTC, a ostatnia to przesunięcie, na które chcemy przekonwertować datę. </p> <p> </p> <h2 id=\"add-subtract-dates\"> Dodaj / Odejmij daty </h2> <p> Wiele razy trzeba dodawać lub odejmować od dat, na przykład, jeśli chcesz pobrać rekordy sprzed tygodnia lub <a href=\"https://www.makeuseof.com/how-to-use-crontab-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> zaplanować coś </a> za miesiąc od teraz. </p> <p> Na szczęście MySQL ma doskonałą <strong> DATE_ADD() </strong> i <strong> DATE_SUB() </strong> funkcje czyniące to zadanie niezwykle łatwym. Na przykład możesz odjąć dwa tygodnie od bieżącej daty za pomocą instrukcji SQL: </p> <pre><code class=\"hljs\">SELECT DATE_SUB(now(), interval 2 week);</code></pre> <p> Jeśli zamiast tego chcesz dodać trzy dni do istniejącego znacznika czasu, użyjesz: </p> <pre><code class=\"hljs ruby\">SELECT DATE_ADD('2021-02-07 11:52:06', interval 3 day);</code></pre> <p> Obie funkcje działają tak samo, pierwszym argumentem jest znacznik czasu, od którego zaczynasz, a drugim interwał dodawania lub odejmowania. Drugi argument jest zawsze sformatowany tak samo, zaczynając od słowa <strong> interwał </strong> po której następuje wartość liczbowa i sam interwał, który może być dowolnym z następujących: sekunda, minuta, godzina, dzień, tydzień, miesiąc, kwartał, rok. </p> <p> Na przykład, jeśli chcesz pobrać wszystkie logowania, które miały miejsce w ciągu ostatnich 34 minut, możesz użyć instrukcji SQL, takiej jak: </p> <pre><code class=\"hljs perl\">SELECT * FROM logins WHERE login_date >= DATE_SUB(now(), interval 45 minute);</code></pre> <p> Jak widać, spowodowałoby to pobranie wszystkich rekordów z <strong> loginy </strong> tabela z datą logowania większą niż aktualny czas minus 45 minut, czyli innymi słowy ostatnie 45 minut. </p> <p> </p> <h2 id=\"get-difference-between-dates\"> Uzyskaj różnicę między datami </h2> <p> Czasami trzeba sprawdzić, ile czasu upłynęło między dwiema datami. Możesz łatwo uzyskać liczbę dni między dwiema różnymi datami za pomocą <strong> DATA RÓŻNICA </strong> funkcja, taka jak poniższa instrukcja SQL: </p> <pre><code class=\"hljs ruby\">SELECT DATEDIFF(now(), '2020-12-15');</code></pre> <p> <strong> DATA RÓŻNICA </strong> funkcja przyjmuje dwa argumenty, z których oba są znacznikami daty/czasu i podaje liczbę dni pomiędzy nimi. Powyższy przykład pokaże liczbę dni, które upłynęły od 15 grudnia 2020 r. do dziś. </p> <p> Aby uzyskać liczbę sekund między dwiema datami, <strong> TO_SECONDS() </strong> funkcja może się przydać, na przykład: </p> <pre><code class=\"hljs ruby\">SELECT TO_SECONDS(now()) - TO_SECONDS('2021-02-05 11:56:41');</code></pre> <p> Spowoduje to liczbę sekund między dwiema podanymi datami. </p> <p> </p> <h2 id=\"extract-segments-from-dates\"> Wyodrębnij segmenty z dat </h2> <p> Istnieją różne funkcje MySQL, które pozwalają łatwo wyodrębnić określone segmenty z dat, na przykład jeśli chcesz tylko miesiąc, dzień roku lub godzinę. Oto kilka przykładów takich funkcji: </p> <pre><code class=\"hljs ruby\">SELECT MONTH('2021-02-11 15:27:52');</code></pre> <pre><code class=\"hljs\">SELECT HOUR(now());</code></pre> <pre><code class=\"hljs ruby\">SELECT DAYOFYEAR('2021-07-15 12:00:00');</code></pre> <p> Powyższe instrukcje SQL skutkowałyby <strong> 02 </strong> , bieżąca godzina oraz <strong> 196 </strong> ponieważ 15 września jest 196 dniem roku. Oto lista wszystkich dostępnych funkcji wyodrębniania dat, z których każda przyjmuje tylko jeden argument, z którego pobierana jest data: </p> <pre><code class=\"hljs perl\">- SECOND()<br>- MINUTE()<br>- HOUR()<br>- DAY()<br>- WEEK() - Number 0 - 52 defining the week within the year.<br>- MONTH()<br>- QUARTER() - Number 1 - 4 defining the quarter of the year.<br>- YEAR()<br>- DAYOFYEAR() - The day of the year (eg. Sept 15th = 196).<br>- LAST_DAY() - The last day in the given month.<br>- DATE() - The date in YYYY-MM-DD format without the time.<br>- TIME() The time in HH:II:SS format without the date.<br>- TO_DAYS() - The number of days since A.D. 0.<br>- TO_SECONDS() - The number of seconds since A.D. 0.<br>- UNIX_TIMESTAMP() - The number of seconds since the epoch (Jan 1st, 1970)</code></pre> <p> Na przykład, jeśli chcesz tylko pobrać miesiąc i rok, w którym utworzono wszystkich użytkowników, możesz użyć instrukcji SQL, takiej jak: </p> <pre><code class=\"hljs\">SELECT id, MONTH(created_at), YEAR(created_at) FROM users;</code></pre> <p> Spowoduje to odzyskanie wszystkich rekordów w <strong> użytkownicy </strong> tabeli i pokaż id#, miesiąc i rok, w którym każdy użytkownik został utworzony. </p> <p> </p> <h2 id=\"grouping-records-by-date-period\"> Grupowanie rekordów według daty i okresu </h2> <p> Jednym z doskonałych zastosowań funkcji daty jest możliwość grupowania rekordów według okresu za pomocą <strong> GRUPUJ WEDŁUG </strong> w instrukcjach SQL. Na przykład, może chcesz pobrać łączną kwotę wszystkich zamówień w 2020 roku pogrupowanych według miesięcy. Możesz użyć instrukcji SQL, takiej jak: </p> <pre><code class=\"hljs ruby\">SELECT MONTH(created_at), SUM(amount) FROM orders WHERE created_at BETWEEN '2020-01-01 00:00:00' AND '2020-12-31 23:59:59' GROUP BY MONTH(created_at);</code></pre> <p> Spowoduje to pobranie wszystkich zamówień złożonych w roku 2020, pogrupowanie ich według miesiąca, w którym zostały utworzone, i zwrócenie 12 rekordów pokazujących łączną kwotę zamówienia w każdym miesiącu roku. </p> <p> Pamiętaj, że w celu uzyskania lepszej wydajności indeksowania zawsze najlepiej jest unikać używania funkcji daty, takich jak <strong> ROK() </strong> wewnątrz klauzuli WHERE instrukcji SQL, a zamiast tego użyj <strong> POMIĘDZY </strong> operator, jak pokazano w powyższym przykładzie. </p> <p> </p> <h2 id=\"never-be-confused-with-dates-again\"> Nigdy więcej nie daj się pomylić z datami </h2> <p> Korzystając z powyższej wiedzy, możesz teraz wydajnie pracować, tłumaczyć i wykonywać operacje na datach i godzinach w szerokim zakresie przypadków użycia. </p> <p> Pamiętaj, aby zawsze używać czasu UTC podczas pracy z datami dla uproszczenia i korzystaj z powyższych wskazówek, aby efektywnie zarządzać datami w oprogramowaniu, niezależnie od tego, czy chodzi o wykonywanie prostych obliczeń, czy łatwe pobieranie raportów pogrupowanych według okresów dat. </p> <p> Jeśli jesteś trochę nowy w SQL, koniecznie sprawdź te <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> podstawowe polecenia SQL </a> aby pomóc ulepszyć korzystanie z SQL. </p>"}