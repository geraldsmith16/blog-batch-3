{"title":"Como trabalhar com eficácia com datas e horários no MySQL","content":"<p> Datas e horários são importantes, ajudam a manter as coisas organizadas e são um aspecto integrante de qualquer operação de software. </p> <p> Trabalhar com eles de forma eficiente no banco de dados às vezes pode parecer confuso, seja trabalhar em vários fusos horários, adicionar / subtrair datas e outras operações. </p> <p> Aprenda as várias funções do MySQL disponíveis para manipular e gerenciar facilmente datas / horas em seu banco de dados. </p> <h2 id=\"working-with-time-zones\"> Trabalho com fusos horários </h2> <p> Para ajudar a manter as coisas padronizadas, você só deve trabalhar com datas / horas no fuso horário UTC. Cada vez que você estabelece uma conexão com o banco de dados MySQL, deve mudar o fuso horário para UTC, o que pode ser feito com a seguinte instrução SQL: </p> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <p> Como todas as datas agora serão salvas em UTC, você sempre sabe com o que está trabalhando, tornando as coisas mais simples e diretas. </p> <p> Quando necessário, você pode facilmente <a href=\"https://www.makeuseof.com/tag/polytime-time-zone-conversion-app/\" target=\"_blank\" rel=\"nofollow noopener\"> converter o fuso horário </a> de qualquer valor de data / hora / carimbo de data / hora com o prático <strong> CONVERT_TZ () </strong> Função MySQL. Você precisa saber o deslocamento primeiro, por exemplo, PST na costa oeste da América do Norte é UTC -08: 00, então você pode usar: </p> <pre><code class=\"hljs ruby\">SELECT CONVERT_TZ('2021-02-04 21:47:23', '+0:00', '-8:00');</code></pre> <p> Isto resulta em <strong> 2021-02-04 13:47:23 </strong> o que é exatamente correto. Os três argumentos passaram para <strong> CONVERT_TZ () </strong> são primeiro a data / hora / carimbo de data / hora com que você está começando (use agora () para a hora atual), o segundo sempre será <strong> &#39;+0: 00&#39; </strong> já que todas as datas são forçadas para UTC no banco de dados, e o último é o deslocamento para o qual desejamos converter a data. </p> <p> </p> <h2 id=\"add-subtract-dates\"> Adicionar / subtrair datas </h2> <p> Muitas vezes você precisa adicionar ou subtrair de datas, como se você precisasse recuperar registros de uma semana atrás, ou <a href=\"https://www.makeuseof.com/how-to-use-crontab-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> agendar algo </a> daqui a um mês. </p> <p> Felizmente, o MySQL tem o excelente <strong> DATE_ADD () </strong> e <strong> DATE_SUB () </strong> funções que tornam esta tarefa extremamente fácil. Por exemplo, você pode subtrair duas semanas da data atual com a instrução SQL: </p> <pre><code class=\"hljs\">SELECT DATE_SUB(now(), interval 2 week);</code></pre> <p> Se, em vez disso, você quisesse adicionar três dias a um carimbo de data / hora existente, usaria: </p> <pre><code class=\"hljs ruby\">SELECT DATE_ADD('2021-02-07 11:52:06', interval 3 day);</code></pre> <p> Ambas as funções funcionam da mesma forma, o primeiro argumento é o carimbo de data / hora com o qual você está começando e o segundo argumento é o intervalo a adicionar ou subtrair. O segundo argumento é sempre formatado da mesma forma, começando com a palavra <strong> intervalo </strong> seguido por um valor numérico e o próprio intervalo, que pode ser qualquer um dos seguintes: segundo, minuto, hora, dia, semana, mês, trimestre, ano. </p> <p> Em outro exemplo, se você quiser recuperar todos os logins que ocorreram nos últimos 34 minutos, poderá usar uma instrução SQL, como: </p> <pre><code class=\"hljs perl\">SELECT * FROM logins WHERE login_date >= DATE_SUB(now(), interval 45 minute);</code></pre> <p> Como você pode ver, isso recuperaria todos os registros do <strong> logins </strong> tabela com uma data de login maior que a hora atual menos 45 minutos, ou seja, os últimos 45 minutos. </p> <p> </p> <h2 id=\"get-difference-between-dates\"> Obtenha a diferença entre as datas </h2> <p> Às vezes, você precisa saber quanto tempo passou entre duas datas. Você pode facilmente obter o número de dias entre duas datas diferentes com o <strong> DATEDIFF </strong> função, como a instrução SQL abaixo: </p> <pre><code class=\"hljs ruby\">SELECT DATEDIFF(now(), '2020-12-15');</code></pre> <p> O <strong> DATEDIFF </strong> A função recebe dois argumentos, ambos são carimbos de data / hora e fornece o número de dias entre eles. O exemplo acima mostrará o número de dias decorridos de 15 de dezembro de 2020 até hoje. </p> <p> Para obter o número de segundos entre duas datas, o <strong> TO_SECONDS () </strong> função pode ser útil, por exemplo: </p> <pre><code class=\"hljs ruby\">SELECT TO_SECONDS(now()) - TO_SECONDS('2021-02-05 11:56:41');</code></pre> <p> Isso resultará no número de segundos entre as duas datas fornecidas. </p> <p> </p> <h2 id=\"extract-segments-from-dates\"> Extrair segmentos de datas </h2> <p> Existem várias funções do MySQL que permitem extrair facilmente segmentos específicos de datas, como se você quisesse apenas o mês, o dia do ano ou a hora. Aqui estão alguns exemplos dessas funções: </p> <pre><code class=\"hljs ruby\">SELECT MONTH('2021-02-11 15:27:52');</code></pre> <pre><code class=\"hljs\">SELECT HOUR(now());</code></pre> <pre><code class=\"hljs ruby\">SELECT DAYOFYEAR('2021-07-15 12:00:00');</code></pre> <p> As instruções SQL acima resultariam em <strong> 02 </strong> , a hora atual e <strong> 196 </strong> já que 15 de setembro é o 196º dia do ano. Aqui está uma lista de todas as funções de extração de data disponíveis, cada uma recebendo apenas um argumento, a data sendo extraída de: </p> <pre><code class=\"hljs perl\">- SECOND()<br>- MINUTE()<br>- HOUR()<br>- DAY()<br>- WEEK() - Number 0 - 52 defining the week within the year.<br>- MONTH()<br>- QUARTER() - Number 1 - 4 defining the quarter of the year.<br>- YEAR()<br>- DAYOFYEAR() - The day of the year (eg. Sept 15th = 196).<br>- LAST_DAY() - The last day in the given month.<br>- DATE() - The date in YYYY-MM-DD format without the time.<br>- TIME() The time in HH:II:SS format without the date.<br>- TO_DAYS() - The number of days since A.D. 0.<br>- TO_SECONDS() - The number of seconds since A.D. 0.<br>- UNIX_TIMESTAMP() - The number of seconds since the epoch (Jan 1st, 1970)</code></pre> <p> Por exemplo, se você quiser apenas recuperar o mês e o ano em que todos os usuários foram criados, você pode usar uma instrução SQL como: </p> <pre><code class=\"hljs\">SELECT id, MONTH(created_at), YEAR(created_at) FROM users;</code></pre> <p> Isso recuperaria todos os registros dentro do <strong> Comercial </strong> tabela e mostra o id #, mês e ano em que cada usuário foi criado. </p> <p> </p> <h2 id=\"grouping-records-by-date-period\"> Agrupando registros por período de datas </h2> <p> Um excelente uso das funções de data é a capacidade de agrupar registros por período de data usando <strong> GRUPO POR </strong> dentro de suas instruções SQL. Por exemplo, talvez você queira extrair o valor total de todos os pedidos em 2020 agrupados por mês. Você pode usar uma instrução SQL como: </p> <pre><code class=\"hljs ruby\">SELECT MONTH(created_at), SUM(amount) FROM orders WHERE created_at BETWEEN '2020-01-01 00:00:00' AND '2020-12-31 23:59:59' GROUP BY MONTH(created_at);</code></pre> <p> Isso recuperaria todos os pedidos feitos no ano 2020, agruparia pelo mês em que foram criados e retornaria 12 registros mostrando a quantidade total solicitada em cada mês do ano. </p> <p> Observe que para um melhor desempenho do índice, é sempre melhor evitar o uso de funções de data, como <strong> ANO() </strong> dentro da cláusula WHERE das instruções SQL e, em vez disso, use o <strong> ENTRE </strong> operador como mostrado no exemplo acima. </p> <p> </p> <h2 id=\"never-be-confused-with-dates-again\"> Nunca mais se confunda com datas </h2> <p> Usando o conhecimento acima, agora você pode trabalhar, traduzir e executar operações em datas e horas de maneira eficiente em uma ampla variedade de casos de uso. </p> <p> Lembre-se de sempre usar UTC ao trabalhar com datas para simplificar e utilizar as dicas acima para gerenciar datas com eficiência em seu software, seja para concluir cálculos simples ou obter relatórios agrupados por períodos de datas com facilidade. </p> <p> Se você é novo em SQL, certifique-se de verificar estes <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> comandos SQL essenciais </a> para ajudar a melhorar seu uso de SQL. </p>"}