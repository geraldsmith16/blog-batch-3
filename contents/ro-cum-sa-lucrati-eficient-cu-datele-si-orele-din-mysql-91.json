{"title":"Cum să lucrați eficient cu datele și orele din MySQL","content":"<p> Datele și orele sunt importante, ajută la menținerea organizării lucrurilor și sunt un aspect integral al oricărei operațiuni software. </p> <p> Lucrul eficient cu aceștia în baza de date poate părea uneori confuz, indiferent dacă funcționează în diferite fusuri orare, adăugând / scăzând date și alte operații. </p> <p> Aflați diferitele funcții MySQL disponibile pentru a gestiona și gestiona cu ușurință datele / orele din baza de date. </p> <h2 id=\"working-with-time-zones\"> Lucrul cu zonele orare </h2> <p> Pentru a menține standardizarea lucrurilor, ar trebui să lucrați întotdeauna doar cu date / ore în fusul orar UTC. De fiecare dată când stabiliți o conexiune la baza de date MySQL, ar trebui să comutați fusul orar la UTC, ceea ce se poate face cu următoarea instrucțiune SQL: </p> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <p> Deoarece toate datele vor fi acum salvate în UTC, știți întotdeauna cu ce lucrați, făcând lucrurile mai simpliste și mai simple. </p> <p> Când este necesar, puteți cu ușurință <a href=\"https://www.makeuseof.com/tag/polytime-time-zone-conversion-app/\" target=\"_blank\" rel=\"nofollow noopener\"> converti fusul orar </a> a oricărei valori datetime / timestamp cu handy <strong> CONVERT_TZ () </strong> Funcția MySQL. Mai întâi trebuie să cunoașteți compensarea, de exemplu, PST pe coasta de vest a Americii de Nord este UTC -08: 00, deci puteți utiliza: </p> <pre><code class=\"hljs ruby\">SELECT CONVERT_TZ('2021-02-04 21:47:23', '+0:00', '-8:00');</code></pre> <p> Acest lucru are ca rezultat <strong> 2021-02-04 13:47:23 </strong> ceea ce este exact corect. Cele trei argumente au trecut la <strong> CONVERT_TZ () </strong> sunt mai întâi data / ora cu care începeți (utilizați acum () pentru ora curentă), a doua va fi întotdeauna <strong> „+0: 00” </strong> deoarece toate datele sunt forțate să UTC în baza de date, iar ultima este compensarea pe care dorim să o convertim la. </p> <p> </p> <h2 id=\"add-subtract-dates\"> Adăugare / scădere date </h2> <p> De multe ori trebuie să adăugați sau să scădeți din date, cum ar fi dacă trebuie să preluați înregistrări de acum o săptămână sau <a href=\"https://www.makeuseof.com/how-to-use-crontab-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> programează ceva </a> peste o lună de acum. </p> <p> Din fericire, MySQL are excelentul <strong> DATE_ADD () </strong> și <strong> DATE_SUB () </strong> funcții care fac această sarcină extrem de ușoară. De exemplu, puteți scădea două săptămâni din data curentă cu instrucțiunea SQL: </p> <pre><code class=\"hljs\">SELECT DATE_SUB(now(), interval 2 week);</code></pre> <p> Dacă, în schimb, ați dori să adăugați trei zile la un timestamp existent, ați utiliza: </p> <pre><code class=\"hljs ruby\">SELECT DATE_ADD('2021-02-07 11:52:06', interval 3 day);</code></pre> <p> Ambele funcții funcționează la fel, primul argument este marca de timp cu care începeți, iar al doilea argument este intervalul de adunare sau scădere. Al doilea argument este întotdeauna formatat la fel începând cu cuvântul <strong> interval </strong> urmată de o valoare numerică și de intervalul în sine, care poate fi oricare dintre următoarele: al doilea, minutul, ora, ziua, săptămâna, luna, trimestrul, anul. </p> <p> Pentru un alt exemplu, dacă doriți să recuperați toate datele de conectare care au avut loc în ultimele 34 de minute, puteți utiliza o instrucțiune SQL, cum ar fi: </p> <pre><code class=\"hljs perl\">SELECT * FROM logins WHERE login_date >= DATE_SUB(now(), interval 45 minute);</code></pre> <p> După cum puteți vedea, acest lucru va prelua toate înregistrările din <strong> conectări </strong> tabel cu o dată de conectare mai mare decât ora curentă minus 45 de minute sau, cu alte cuvinte, ultimele 45 de minute. </p> <p> </p> <h2 id=\"get-difference-between-dates\"> Obțineți diferența între date </h2> <p> Uneori trebuie să obțineți cât timp a trecut între două date. Puteți obține cu ușurință numărul de zile între două date diferite cu ajutorul <strong> DATEDIFF </strong> funcție, cum ar fi instrucțiunea SQL de mai jos: </p> <pre><code class=\"hljs ruby\">SELECT DATEDIFF(now(), '2020-12-15');</code></pre> <p> <strong> DATEDIFF </strong> funcția ia două argumente, ambele fiind ștampile de dată / oră și indică numărul de zile dintre ele. Exemplul de mai sus va arăta numărul de zile trecute de la 15 decembrie 2020 până astăzi. </p> <p> Pentru a obține numărul de secunde între două date, <strong> TO_SECONDS () </strong> funcția poate fi utilă, de exemplu: </p> <pre><code class=\"hljs ruby\">SELECT TO_SECONDS(now()) - TO_SECONDS('2021-02-05 11:56:41');</code></pre> <p> Aceasta va duce la numărul de secunde dintre cele două date furnizate. </p> <p> </p> <h2 id=\"extract-segments-from-dates\"> Extrageți segmente din date </h2> <p> Există diferite funcții MySQL care vă permit să extrageți cu ușurință anumite segmente din date, cum ar fi dacă doriți doar luna, ziua anului sau ora. Iată câteva exemple de astfel de funcții: </p> <pre><code class=\"hljs ruby\">SELECT MONTH('2021-02-11 15:27:52');</code></pre> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <pre><code class=\"hljs ruby\">SELECT DAYOFYEAR('2021-07-15 12:00:00');</code></pre> <p> Instrucțiunile SQL de mai sus ar avea ca rezultat <strong> 02 </strong> , ora curentă și <strong> 196 </strong> întrucât 15 septembrie este a 196-a zi a anului. Iată o listă cu toate funcțiile de extragere a date disponibile, fiecare având doar un argument, data fiind extrasă din: </p> <pre><code class=\"hljs perl\">- SECOND()<br>- MINUTE()<br>- HOUR()<br>- DAY()<br>- WEEK() - Number 0 - 52 defining the week within the year.<br>- MONTH()<br>- QUARTER() - Number 1 - 4 defining the quarter of the year.<br>- YEAR()<br>- DAYOFYEAR() - The day of the year (eg. Sept 15th = 196).<br>- LAST_DAY() - The last day in the given month.<br>- DATE() - The date in YYYY-MM-DD format without the time.<br>- TIME() The time in HH:II:SS format without the date.<br>- TO_DAYS() - The number of days since A.D. 0.<br>- TO_SECONDS() - The number of seconds since A.D. 0.<br>- UNIX_TIMESTAMP() - The number of seconds since the epoch (Jan 1st, 1970)</code></pre> <p> De exemplu, dacă poate doriți doar să preluați luna și anul în care toți utilizatorii au fost creați, puteți utiliza o instrucțiune SQL, cum ar fi: </p> <pre><code class=\"hljs\">SELECT id, MONTH(created_at), YEAR(created_at) FROM users;</code></pre> <p> Aceasta ar prelua toate înregistrările din <strong> utilizatori </strong> tabel și arată numărul de identificare, luna și anul în care a fost creat fiecare utilizator. </p> <p> </p> <h2 id=\"grouping-records-by-date-period\"> Gruparea înregistrărilor după dată Perioada </h2> <p> O utilizare excelentă a funcțiilor de dată este abilitatea de a grupa înregistrările în funcție de perioada de dată folosind <strong> A SE GRUPA CU </strong> în cadrul declarațiilor dvs. SQL. De exemplu, poate doriți să extrageți suma totală a tuturor comenzilor în 2020 grupate în funcție de lună. Puteți utiliza o instrucțiune SQL, cum ar fi: </p> <pre><code class=\"hljs ruby\">SELECT MONTH(created_at), SUM(amount) FROM orders WHERE created_at BETWEEN '2020-01-01 00:00:00' AND '2020-12-31 23:59:59' GROUP BY MONTH(created_at);</code></pre> <p> Acest lucru va prelua toate comenzile plasate în anul 2020, le va grupa în funcție de luna în care au fost create și ar returna 12 înregistrări care arată suma totală comandată în fiecare lună a anului. </p> <p> Vă rugăm să rețineți, pentru o performanță mai bună a indexului, este întotdeauna mai bine să evitați utilizarea funcțiilor de dată, cum ar fi <strong> AN() </strong> în cadrul clauzei WHERE a instrucțiunilor SQL și, în schimb, utilizați <strong> ÎNTRE </strong> operator așa cum se arată în exemplul de mai sus. </p> <p> </p> <h2 id=\"never-be-confused-with-dates-again\"> Nu vă mai confunda niciodată cu datele </h2> <p> Folosind cunoștințele de mai sus puteți lucra acum eficient, traduce și efectua operațiuni în date și ore într-o gamă largă de cazuri de utilizare. </p> <p> Nu uitați să utilizați întotdeauna UTC când lucrați cu date pentru simplitate și utilizați sfaturile de mai sus pentru a gestiona eficient datele din software-ul dvs., fie că este vorba de a completa calcule simple sau de a extrage cu ușurință rapoarte grupate pe perioade de dată. </p> <p> Dacă sunteți oarecum nou în SQL, asigurați-vă că le verificați <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> comenzi SQL esențiale </a> pentru a vă ajuta să vă îmbunătățiți utilizarea SQL. </p>"}