{"title":"Как эффективно работать с датой и временем в MySQL","content":"<p> Дата и время важны, они помогают поддерживать порядок и являются неотъемлемым аспектом любой операции с программным обеспечением. </p> <p> Эффективная работа с ними в базе данных иногда может показаться запутанной, независимо от того, работает ли она в разных часовых поясах, добавление / вычитание дат и другие операции. </p> <p> Изучите различные доступные функции MySQL для простой обработки и управления датами / временем в вашей базе данных. </p> <h2 id=\"working-with-time-zones\"> Работа с часовыми поясами </h2> <p> Чтобы сохранить стандартизацию, вы должны работать только с датой / временем в часовом поясе UTC. Каждый раз, когда вы устанавливаете соединение с базой данных MySQL, вы должны переключать часовой пояс на UTC, что можно сделать с помощью следующего оператора SQL: </p> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <p> Поскольку все даты теперь будут сохраняться в формате UTC, вы всегда знаете, с чем работаете, что упрощает и упрощает работу. </p> <p> При необходимости вы легко можете <a href=\"https://www.makeuseof.com/tag/polytime-time-zone-conversion-app/\" target=\"_blank\" rel=\"nofollow noopener\"> преобразовать часовой пояс </a> любого значения datetime / timestamp с помощью удобного <strong> CONVERT_TZ () </strong> Функция MySQL. Сначала вам нужно знать смещение, например, PST на западном побережье Северной Америки - это UTC -08: 00, поэтому вы можете использовать: </p> <pre><code class=\"hljs ruby\">SELECT CONVERT_TZ('2021-02-04 21:47:23', '+0:00', '-8:00');</code></pre> <p> Это приводит к <strong> 2021-02-04 13:47:23 </strong> что совершенно правильно. Три аргумента, переданные в <strong> CONVERT_TZ () </strong> сначала являются датой и временем / меткой времени, с которой вы начинаете (используйте now () для текущего времени), второй всегда будет <strong> &#39;+0: 00&#39; </strong> поскольку все даты в базе данных принудительно указаны в формате UTC, а последнее - это смещение, в которое мы хотим преобразовать дату. </p> <p> </p> <h2 id=\"add-subtract-dates\"> Добавить / вычесть даты </h2> <p> Часто вам нужно прибавлять или вычитать из дат, например, если вам нужно получить записи, сделанные неделю назад, или <a href=\"https://www.makeuseof.com/how-to-use-crontab-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> запланировать что-нибудь </a> через месяц. </p> <p> К счастью, у MySQL есть отличные <strong> DATE_ADD () </strong> а также <strong> DATE_SUB () </strong> функции, делающие эту задачу чрезвычайно простой. Например, вы можете вычесть две недели из текущей даты с помощью оператора SQL: </p> <pre><code class=\"hljs\">SELECT DATE_SUB(now(), interval 2 week);</code></pre> <p> Если вместо этого вы хотите добавить три дня к существующей метке времени, вы должны использовать: </p> <pre><code class=\"hljs ruby\">SELECT DATE_ADD('2021-02-07 11:52:06', interval 3 day);</code></pre> <p> Обе функции работают одинаково, первый аргумент - это метка времени, с которой вы начинаете, а второй аргумент - это интервал, который нужно добавить или вычесть. Второй аргумент всегда форматируется одинаково, начиная со слова <strong> интервал </strong> за которым следует числовое значение и сам интервал, который может быть любым из следующих: секунда, минута, час, день, неделя, месяц, квартал, год. </p> <p> В качестве другого примера, если вы хотите получить все входы в систему, которые произошли за последние 34 минуты, вы можете использовать оператор SQL, такой как: </p> <pre><code class=\"hljs perl\">SELECT * FROM logins WHERE login_date >= DATE_SUB(now(), interval 45 minute);</code></pre> <p> Как видите, при этом будут извлечены все записи из <strong> логины </strong> таблица с датой входа в систему, превышающей текущее время минус 45 минут, или, другими словами, последние 45 минут. </p> <p> </p> <h2 id=\"get-difference-between-dates\"> Узнайте разницу между датами </h2> <p> Иногда вам нужно узнать, сколько времени прошло между двумя свиданиями. Вы можете легко получить количество дней между двумя разными датами с помощью <strong> РАЗНДАТ </strong> функция, такая как приведенный ниже оператор SQL: </p> <pre><code class=\"hljs ruby\">SELECT DATEDIFF(now(), '2020-12-15');</code></pre> <p> В <strong> РАЗНДАТ </strong> Функция принимает два аргумента, оба из которых являются метками даты и времени, и дает количество дней между ними. В приведенном выше примере будет показано количество дней, прошедших с 15 декабря 2020 года до сегодняшнего дня. </p> <p> Чтобы получить количество секунд между двумя датами, <strong> TO_SECONDS () </strong> функция может пригодиться, например: </p> <pre><code class=\"hljs ruby\">SELECT TO_SECONDS(now()) - TO_SECONDS('2021-02-05 11:56:41');</code></pre> <p> Это приведет к количеству секунд между двумя указанными датами. </p> <p> </p> <h2 id=\"extract-segments-from-dates\"> Извлечь сегменты по датам </h2> <p> Существуют различные функции MySQL, которые позволяют легко извлекать определенные сегменты из дат, например, если вам нужен только месяц, день года или час. Вот несколько примеров таких функций: </p> <pre><code class=\"hljs ruby\">SELECT MONTH('2021-02-11 15:27:52');</code></pre> <pre><code class=\"hljs\">SELECT HOUR(now());</code></pre> <pre><code class=\"hljs ruby\">SELECT DAYOFYEAR('2021-07-15 12:00:00');</code></pre> <p> Вышеупомянутые операторы SQL приведут к <strong> 02 </strong> , текущий час и <strong> 196 </strong> поскольку 15 сентября - 196-й день в году. Вот список всех доступных функций извлечения даты, каждая из которых принимает только один аргумент, дата извлекается из: </p> <pre><code class=\"hljs perl\">- SECOND()<br>- MINUTE()<br>- HOUR()<br>- DAY()<br>- WEEK() - Number 0 - 52 defining the week within the year.<br>- MONTH()<br>- QUARTER() - Number 1 - 4 defining the quarter of the year.<br>- YEAR()<br>- DAYOFYEAR() - The day of the year (eg. Sept 15th = 196).<br>- LAST_DAY() - The last day in the given month.<br>- DATE() - The date in YYYY-MM-DD format without the time.<br>- TIME() The time in HH:II:SS format without the date.<br>- TO_DAYS() - The number of days since A.D. 0.<br>- TO_SECONDS() - The number of seconds since A.D. 0.<br>- UNIX_TIMESTAMP() - The number of seconds since the epoch (Jan 1st, 1970)</code></pre> <p> Например, если вы хотите получить только месяц и год, в которых были созданы все пользователи, вы можете использовать оператор SQL, например: </p> <pre><code class=\"hljs\">SELECT id, MONTH(created_at), YEAR(created_at) FROM users;</code></pre> <p> Это позволит получить все записи в <strong> пользователи </strong> Таблица и показать номер идентификатора, месяц и год, в котором был создан каждый пользователь. </p> <p> </p> <h2 id=\"grouping-records-by-date-period\"> Группировка записей по дате и периоду </h2> <p> Одним из отличных вариантов использования функций даты является возможность группировать записи по периоду дат с помощью <strong> ГРУППА ПО </strong> в ваших операторах SQL. Например, вы хотите получить общую сумму всех заказов в 2020 году, сгруппированных по месяцам. Вы можете использовать такой SQL-оператор, как: </p> <pre><code class=\"hljs ruby\">SELECT MONTH(created_at), SUM(amount) FROM orders WHERE created_at BETWEEN '2020-01-01 00:00:00' AND '2020-12-31 23:59:59' GROUP BY MONTH(created_at);</code></pre> <p> Это позволит получить все заказы, размещенные в 2020 году, сгруппировать их по месяцам, по которым они были созданы, и вернуть 12 записей, показывающих общую сумму, заказанную за каждый месяц года. </p> <p> Обратите внимание: для повышения производительности индекса всегда лучше избегать использования функций даты, таких как <strong> ГОД() </strong> в предложении WHERE операторов SQL и вместо этого используйте <strong> МЕЖДУ </strong> как показано в приведенном выше примере. </p> <p> </p> <h2 id=\"never-be-confused-with-dates-again\"> Никогда больше не путайте с датами </h2> <p> Используя вышеуказанные знания, теперь вы можете эффективно работать, переводить и выполнять операции с датами и временем в широком спектре сценариев использования. </p> <p> Не забывайте всегда использовать UTC при работе с датами для простоты и используйте приведенные выше советы для эффективного управления датами в вашем программном обеспечении, будь то выполнение простых вычислений или легкое извлечение отчетов, сгруппированных по периодам дат. </p> <p> Если вы новичок в SQL, обязательно ознакомьтесь с этими <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> основные команды SQL </a> чтобы помочь вам улучшить использование SQL. </p>"}