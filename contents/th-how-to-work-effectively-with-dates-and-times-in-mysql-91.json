{"title":"วิธีทำงานอย่างมีประสิทธิภาพด้วยวันที่และเวลาใน MySQL","content":"<p> วันที่และเวลามีความสำคัญ ช่วยจัดระเบียบสิ่งต่างๆ และเป็นส่วนสำคัญของการทำงานของซอฟต์แวร์ </p> <p> การทำงานกับพวกเขาอย่างมีประสิทธิภาพภายในฐานข้อมูลในบางครั้งอาจดูสับสน ไม่ว่าจะเป็นการทำงานในเขตเวลาต่างๆ การเพิ่ม/ลบวันที่ และการดำเนินการอื่นๆ </p> <p> เรียนรู้ฟังก์ชัน MySQL ต่างๆ ที่พร้อมใช้งานเพื่อจัดการและจัดการวันที่/เวลาภายในฐานข้อมูลของคุณได้อย่างง่ายดาย </p> <h2 id=\"working-with-time-zones\"> การทำงานกับเขตเวลา </h2> <p> เพื่อช่วยให้ทุกอย่างเป็นมาตรฐาน คุณควรทำงานกับวันที่/เวลาในเขตเวลา UTC เท่านั้น ทุกครั้งที่คุณสร้างการเชื่อมต่อกับฐานข้อมูล MySQL คุณควรเปลี่ยนเขตเวลาเป็น UTC ซึ่งสามารถทำได้ด้วยคำสั่ง SQL ต่อไปนี้: </p> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <p> เนื่องจากวันที่ทั้งหมดจะถูกบันทึกไว้ใน UTC คุณจึงรู้อยู่เสมอว่าคุณกำลังทำอะไรอยู่ ทำให้สิ่งต่างๆ ง่ายขึ้นและตรงไปตรงมามากขึ้น </p> <p> เมื่อจำเป็นคุณสามารถได้อย่างง่ายดาย <a href=\"https://www.makeuseof.com/tag/polytime-time-zone-conversion-app/\" target=\"_blank\" rel=\"nofollow noopener\"> แปลงเขตเวลา </a> ของค่า datetime / timestamp ใด ๆ ด้วย Handy <strong> CONVERT_TZ() </strong> ฟังก์ชัน MySQL คุณต้องรู้ค่าออฟเซ็ตก่อน เช่น PST บนชายฝั่งตะวันตกของอเมริกาเหนือคือ UTC -08:00 ดังนั้นคุณสามารถใช้: </p> <pre><code class=\"hljs ruby\">SELECT CONVERT_TZ('2021-02-04 21:47:23', '+0:00', '-8:00');</code></pre> <p> ส่งผลให้ <strong> 2021-02-04 13:47:23 </strong> ซึ่งถูกต้องแล้ว สามอาร์กิวเมนต์ส่งผ่านไปยัง <strong> CONVERT_TZ() </strong> เป็น datetime / timestamp แรกที่คุณเริ่มต้นด้วย (ใช้ now() สำหรับเวลาปัจจุบัน) วินาทีจะเป็น <strong> &#39;+00:00&#39; </strong> เนื่องจากวันที่ทั้งหมดถูกบังคับให้เป็น UTC ในฐานข้อมูล และสุดท้ายคือออฟเซ็ตที่เราต้องการแปลงวันที่เป็น </p> <p> </p> <h2 id=\"add-subtract-dates\"> เพิ่ม / ลบวันที่ </h2> <p> หลายครั้งที่คุณต้องเพิ่มหรือลบจากวันที่ เช่น หากคุณต้องการดึงบันทึกจากสัปดาห์ที่แล้ว หรือ <a href=\"https://www.makeuseof.com/how-to-use-crontab-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> กำหนดการบางอย่าง </a> หนึ่งเดือนต่อจากนี้ </p> <p> โชคดีที่ MySQL มีคุณสมบัติที่ยอดเยี่ยม <strong> DATE_ADD() </strong> และ <strong> DATE_SUB() </strong> ฟังก์ชั่นทำให้งานนี้ง่ายมาก ตัวอย่างเช่น คุณสามารถลบสองสัปดาห์จากวันที่ปัจจุบันด้วยคำสั่ง SQL: </p> <pre><code class=\"hljs\">SELECT DATE_SUB(now(), interval 2 week);</code></pre> <p> หากคุณต้องการเพิ่มเวลาสามวันในการประทับเวลาที่มีอยู่ คุณจะใช้: </p> <pre><code class=\"hljs ruby\">SELECT DATE_ADD('2021-02-07 11:52:06', interval 3 day);</code></pre> <p> ฟังก์ชันทั้งสองทำงานเหมือนกัน อาร์กิวเมนต์แรกคือการประทับเวลาที่คุณเริ่มต้น และอาร์กิวเมนต์ที่สองคือช่วงเวลาในการเพิ่มหรือลบ อาร์กิวเมนต์ที่สองจะมีรูปแบบเหมือนกันเสมอโดยขึ้นต้นด้วยคำว่า <strong> ช่วงเวลา </strong> ตามด้วยค่าตัวเลขและช่วงเวลา ซึ่งสามารถเป็นค่าใดก็ได้ต่อไปนี้ วินาที นาที ชั่วโมง วัน สัปดาห์ เดือน ไตรมาส ปี </p> <p> ตัวอย่างเช่น หากคุณต้องการดึงข้อมูลการเข้าสู่ระบบทั้งหมดที่เกิดขึ้นใน 34 นาทีที่ผ่านมา คุณสามารถใช้คำสั่ง SQL เช่น: </p> <pre><code class=\"hljs perl\">SELECT * FROM logins WHERE login_date >= DATE_SUB(now(), interval 45 minute);</code></pre> <p> อย่างที่คุณเห็น สิ่งนี้จะดึงบันทึกทั้งหมดจาก <strong> เข้าสู่ระบบ </strong> ตารางที่มีวันที่เข้าสู่ระบบมากกว่าเวลาปัจจุบันลบ 45 นาทีหรืออีกนัยหนึ่งคือ 45 นาทีที่ผ่านมา </p> <p> </p> <h2 id=\"get-difference-between-dates\"> รับความแตกต่างระหว่างวันที่ </h2> <p> บางครั้งคุณจำเป็นต้องได้รับระยะเวลาที่ผ่านไประหว่างสองวัน คุณสามารถรับจำนวนวันระหว่างวันที่สองวันที่แตกต่างกันได้อย่างง่ายดายด้วย <strong> DATEDIFF </strong> ฟังก์ชัน เช่นคำสั่ง SQL ด้านล่าง: </p> <pre><code class=\"hljs ruby\">SELECT DATEDIFF(now(), '2020-12-15');</code></pre> <p> <strong> DATEDIFF </strong> ฟังก์ชันรับสองอาร์กิวเมนต์ ซึ่งทั้งคู่เป็นวันที่ / เวลาประทับและให้จำนวนวันระหว่างกัน ตัวอย่างข้างต้นจะแสดงจำนวนวันที่ผ่านไปตั้งแต่วันที่ 15 ธันวาคม 2020 จนถึงวันนี้ </p> <p> เพื่อให้ได้จำนวนวินาทีระหว่างวันที่สองวัน <strong> TO_SECONDS() </strong> ฟังก์ชันอาจมีประโยชน์ เช่น </p> <pre><code class=\"hljs ruby\">SELECT TO_SECONDS(now()) - TO_SECONDS('2021-02-05 11:56:41');</code></pre> <p> ซึ่งจะส่งผลให้จำนวนวินาทีระหว่างวันที่สองวันที่ระบุ </p> <p> </p> <h2 id=\"extract-segments-from-dates\"> แยกส่วนจากวันที่ </h2> <p> มีฟังก์ชัน MySQL ต่างๆ ที่ช่วยให้คุณแยกกลุ่มเฉพาะออกจากวันที่ได้อย่างง่ายดาย เช่น คุณต้องการเฉพาะเดือน วันของปี หรือชั่วโมง ต่อไปนี้คือตัวอย่างบางส่วนของฟังก์ชันดังกล่าว: </p> <pre><code class=\"hljs ruby\">SELECT MONTH('2021-02-11 15:27:52');</code></pre> <pre><code class=\"hljs\">SELECT HOUR(now());</code></pre> <pre><code class=\"hljs ruby\">SELECT DAYOFYEAR('2021-07-15 12:00:00');</code></pre> <p> คำสั่ง SQL ข้างต้นจะส่งผลให้ <strong> 02 </strong> , ชั่วโมงปัจจุบัน และ <strong> 196 </strong> เนื่องจากวันที่ 15 กันยายน เป็นวันที่ 196 ของปี ต่อไปนี้คือรายการฟังก์ชันการแยกวันที่ทั้งหมดที่มี โดยแต่ละรายการรับอาร์กิวเมนต์เพียงรายการเดียว วันที่ถูกดึงมาจาก </p> <pre><code class=\"hljs perl\">- SECOND()<br>- MINUTE()<br>- HOUR()<br>- DAY()<br>- WEEK() - Number 0 - 52 defining the week within the year.<br>- MONTH()<br>- QUARTER() - Number 1 - 4 defining the quarter of the year.<br>- YEAR()<br>- DAYOFYEAR() - The day of the year (eg. Sept 15th = 196).<br>- LAST_DAY() - The last day in the given month.<br>- DATE() - The date in YYYY-MM-DD format without the time.<br>- TIME() The time in HH:II:SS format without the date.<br>- TO_DAYS() - The number of days since A.D. 0.<br>- TO_SECONDS() - The number of seconds since A.D. 0.<br>- UNIX_TIMESTAMP() - The number of seconds since the epoch (Jan 1st, 1970)</code></pre> <p> ตัวอย่างเช่น ถ้าบางทีคุณอาจต้องการดึงข้อมูลเฉพาะเดือนและปีที่ผู้ใช้ทั้งหมดถูกสร้างขึ้น คุณสามารถใช้คำสั่ง SQL เช่น: </p> <pre><code class=\"hljs\">SELECT id, MONTH(created_at), YEAR(created_at) FROM users;</code></pre> <p> สิ่งนี้จะดึงบันทึกทั้งหมดภายใน <strong> ผู้ใช้ </strong> ตารางและแสดง id#, เดือนและปีที่ผู้ใช้แต่ละรายถูกสร้างขึ้น </p> <p> </p> <h2 id=\"grouping-records-by-date-period\"> การจัดกลุ่มบันทึกตามช่วงเวลาวันที่ </h2> <p> การใช้ฟังก์ชันวันที่ที่ยอดเยี่ยมอย่างหนึ่งคือความสามารถในการจัดกลุ่มบันทึกตามช่วงวันที่โดยใช้ <strong> จัดกลุ่มโดย </strong> ภายในคำสั่ง SQL ของคุณ ตัวอย่างเช่น คุณอาจต้องการดึงยอดรวมของคำสั่งซื้อทั้งหมดในปี 2020 โดยจัดกลุ่มตามเดือน คุณสามารถใช้คำสั่ง SQL เช่น: </p> <pre><code class=\"hljs ruby\">SELECT MONTH(created_at), SUM(amount) FROM orders WHERE created_at BETWEEN '2020-01-01 00:00:00' AND '2020-12-31 23:59:59' GROUP BY MONTH(created_at);</code></pre> <p> การดำเนินการนี้จะดึงข้อมูลคำสั่งซื้อทั้งหมดที่วางในปี 2020 จัดกลุ่มตามเดือนที่สร้างขึ้น และส่งกลับระเบียน 12 รายการที่แสดงยอดรวมที่สั่งซื้อในแต่ละเดือนของปี </p> <p> โปรดทราบว่า เพื่อประสิทธิภาพของดัชนีที่ดีขึ้น วิธีที่ดีที่สุดคือหลีกเลี่ยงการใช้ฟังก์ชันวันที่ เช่น <strong> ปี() </strong> ภายในส่วนคำสั่ง WHERE ของคำสั่ง SQL และใช้ตัวแทน <strong> ระหว่าง </strong> ตัวดำเนินการตามที่แสดงในตัวอย่างข้างต้น </p> <p> </p> <h2 id=\"never-be-confused-with-dates-again\"> อย่าสับสนกับวันที่อีกต่อไป </h2> <p> การใช้ความรู้ข้างต้นทำให้คุณสามารถทำงาน แปล และดำเนินการตามวันที่และเวลาได้อย่างมีประสิทธิภาพในกรณีการใช้งานที่หลากหลาย </p> <p> อย่าลืมใช้ UTC เสมอเมื่อทำงานกับวันที่เพื่อความง่าย และใช้เคล็ดลับข้างต้นเพื่อจัดการวันที่ภายในซอฟต์แวร์ของคุณอย่างมีประสิทธิภาพ ไม่ว่าจะเป็นการคำนวณอย่างง่ายหรือดึงรายงานที่จัดกลุ่มตามช่วงวันที่ </p> <p> หากคุณยังใหม่กับ SQL อย่าลืมตรวจสอบสิ่งเหล่านี้ <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> คำสั่ง SQL ที่จำเป็น </a> เพื่อช่วยปรับปรุงการใช้ SQL ของคุณ </p>"}