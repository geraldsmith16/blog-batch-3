{"title":"MySQL&#39;de Tarihler ve Saatlerle Nasıl Etkili Çalışılır?","content":"<p> Tarihler ve saatler önemlidir, işleri düzenli tutmaya yardımcı olur ve herhangi bir yazılım işleminin ayrılmaz bir parçasıdır. </p> <p> Veri tabanı içinde onlarla verimli bir şekilde çalışmak, çeşitli zaman dilimlerinde çalışıyor olsun, tarih ekleme/çıkarma ve diğer işlemler olsun, bazen kafa karıştırıcı görünebilir. </p> <p> Veritabanınızdaki tarihleri/saatleri kolayca işlemek ve yönetmek için kullanılabilen çeşitli MySQL işlevlerini öğrenin. </p> <h2 id=\"working-with-time-zones\"> Saat Dilimleriyle Çalışma </h2> <p> İşleri standart hale getirmeye yardımcı olmak için, yalnızca UTC saat diliminde tarihler/saatlerle çalışmalısınız. MySQL veritabanına her bağlantı kurduğunuzda, aşağıdaki SQL deyimi ile yapılabilecek saat dilimini UTC olarak değiştirmelisiniz: </p> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <p> Tüm tarihler artık UTC&#39;de kaydedileceğinden, neyle çalıştığınızı her zaman bilirsiniz, bu da işleri daha basit ve anlaşılır hale getirir. </p> <p> Gerektiğinde kolayca yapabilirsiniz <a href=\"https://www.makeuseof.com/tag/polytime-time-zone-conversion-app/\" target=\"_blank\" rel=\"nofollow noopener\"> saat dilimini dönüştür </a> kullanışlı olan herhangi bir tarih/zaman damgası değerinin <strong> CONVERT_TZ() </strong> MySQL işlevi. Önce ofseti bilmeniz gerekir, örneğin, Kuzey Amerika&#39;nın batı kıyısındaki PST UTC -08:00&#39;dir, böylece şunları kullanabilirsiniz: </p> <pre><code class=\"hljs ruby\">SELECT CONVERT_TZ('2021-02-04 21:47:23', '+0:00', '-8:00');</code></pre> <p> Bu, şu şekilde sonuçlanır: <strong> 2021-02-04 13:47:23 </strong> ki bu tam olarak doğru. Aktarılan üç argüman <strong> CONVERT_TZ() </strong> ilk olarak başladığınız tarih/zaman damgası (şimdiki zaman için (şimdi) kullanın), ikincisi her zaman <strong> &#39;+0:00&#39; </strong> tüm tarihler veritabanında UTC&#39;ye zorlandığından ve sonuncusu, tarihi dönüştürmek istediğimiz ofsettir. </p> <p> </p> <h2 id=\"add-subtract-dates\"> Tarih Ekle / Çıkar </h2> <p> Çoğu zaman, örneğin bir hafta öncesinden kayıtları almanız gerekiyorsa veya tarihlerden çıkarmanız gerekir. <a href=\"https://www.makeuseof.com/how-to-use-crontab-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> bir şey programlamak </a> bundan bir ay sonra. </p> <p> Neyse ki MySQL mükemmel <strong> DATE_ADD() </strong> ve <strong> DATE_SUB() </strong> bu görevi son derece kolaylaştıran işlevler. Örneğin, SQL deyimiyle geçerli tarihten iki hafta çıkarabilirsiniz: </p> <pre><code class=\"hljs\">SELECT DATE_SUB(now(), interval 2 week);</code></pre> <p> Bunun yerine mevcut bir zaman damgasına üç gün eklemek isterseniz, şunları kullanırsınız: </p> <pre><code class=\"hljs ruby\">SELECT DATE_ADD('2021-02-07 11:52:06', interval 3 day);</code></pre> <p> Her iki işlev de aynı şekilde çalışır, ilk bağımsız değişken, başladığınız zaman damgasıdır ve ikinci bağımsız değişken, toplama veya çıkarma aralığıdır. İkinci argüman her zaman kelime ile başlayarak aynı şekilde biçimlendirilir. <strong> Aralık </strong> ardından sayısal bir değer ve aşağıdakilerden herhangi biri olabilen aralığın kendisi gelir: saniye, dakika, saat, gün, hafta, ay, çeyrek, yıl. </p> <p> Başka bir örnek için, son 34 dakika içinde gerçekleşen tüm oturumları almak istiyorsanız, aşağıdaki gibi bir SQL ifadesi kullanabilirsiniz: </p> <pre><code class=\"hljs perl\">SELECT * FROM logins WHERE login_date >= DATE_SUB(now(), interval 45 minute);</code></pre> <p> Gördüğünüz gibi, bu, tüm kayıtları <strong> girişler </strong> giriş tarihi mevcut saatten 45 dakika veya diğer bir deyişle son 45 dakikadan daha büyük olan tablo. </p> <p> </p> <h2 id=\"get-difference-between-dates\"> Tarihler Arasındaki Farkı Alın </h2> <p> Bazen iki tarih arasında ne kadar zaman geçtiğini öğrenmeniz gerekir. ile iki farklı tarih arasındaki gün sayısını kolayca alabilirsiniz. <strong> DATEDIFF </strong> aşağıdaki SQL deyimi gibi işlev: </p> <pre><code class=\"hljs ruby\">SELECT DATEDIFF(now(), '2020-12-15');</code></pre> <p> <strong> DATEDIFF </strong> işlevi, her ikisi de tarih/zaman damgası olan iki bağımsız değişken alır ve aralarındaki gün sayısını verir. Yukarıdaki örnek, 15 Aralık 2020&#39;den bugüne kadar geçen gün sayısını gösterecektir. </p> <p> İki tarih arasındaki saniye sayısını almak için, <strong> TO_SECONDS() </strong> işlevi kullanışlı olabilir, örneğin: </p> <pre><code class=\"hljs ruby\">SELECT TO_SECONDS(now()) - TO_SECONDS('2021-02-05 11:56:41');</code></pre> <p> Bu, sağlanan iki tarih arasındaki saniye sayısını verir. </p> <p> </p> <h2 id=\"extract-segments-from-dates\"> Tarihlerden Segment Çıkarma </h2> <p> Yalnızca ayı, yılın gününü veya saati istemeniz gibi, tarihlerden belirli segmentleri kolayca çıkarmanıza olanak tanıyan çeşitli MySQL işlevleri vardır. İşte bu tür işlevlere birkaç örnek: </p> <pre><code class=\"hljs ruby\">SELECT MONTH('2021-02-11 15:27:52');</code></pre> <pre><code class=\"hljs\">SELECT HOUR(now());</code></pre> <pre><code class=\"hljs ruby\">SELECT DAYOFYEAR('2021-07-15 12:00:00');</code></pre> <p> Yukarıdaki SQL ifadeleri <strong> 02 </strong> , geçerli saat ve <strong> 196 </strong> 15 Eylül yılın 196. günü olduğu için. Burada, her biri yalnızca bir argüman alan, tarih ayıklanan tüm tarih çıkarma işlevlerinin bir listesi: </p> <pre><code class=\"hljs perl\">- SECOND()<br>- MINUTE()<br>- HOUR()<br>- DAY()<br>- WEEK() - Number 0 - 52 defining the week within the year.<br>- MONTH()<br>- QUARTER() - Number 1 - 4 defining the quarter of the year.<br>- YEAR()<br>- DAYOFYEAR() - The day of the year (eg. Sept 15th = 196).<br>- LAST_DAY() - The last day in the given month.<br>- DATE() - The date in YYYY-MM-DD format without the time.<br>- TIME() The time in HH:II:SS format without the date.<br>- TO_DAYS() - The number of days since A.D. 0.<br>- TO_SECONDS() - The number of seconds since A.D. 0.<br>- UNIX_TIMESTAMP() - The number of seconds since the epoch (Jan 1st, 1970)</code></pre> <p> Örneğin, yalnızca tüm kullanıcıların oluşturulduğu ayı ve yılı almak istiyorsanız, aşağıdaki gibi bir SQL ifadesi kullanabilirsiniz: </p> <pre><code class=\"hljs\">SELECT id, MONTH(created_at), YEAR(created_at) FROM users;</code></pre> <p> Bu, içindeki tüm kayıtları alır <strong> kullanıcılar </strong> tablosunu görüntüleyin ve her kullanıcının oluşturulduğu id#, ay ve yılı gösterin. </p> <p> </p> <h2 id=\"grouping-records-by-date-period\"> Kayıtları Tarih Döneme Göre Gruplama </h2> <p> Tarih işlevlerinin mükemmel bir kullanımı, kayıtları tarih aralığına göre gruplama yeteneğidir. <strong> GRUP TARAFINDAN </strong> SQL ifadelerinizin içinde. Örneğin, 2020&#39;deki tüm siparişlerin toplam tutarını aya göre gruplandırmak isteyebilirsiniz. Aşağıdaki gibi bir SQL ifadesi kullanabilirsiniz: </p> <pre><code class=\"hljs ruby\">SELECT MONTH(created_at), SUM(amount) FROM orders WHERE created_at BETWEEN '2020-01-01 00:00:00' AND '2020-12-31 23:59:59' GROUP BY MONTH(created_at);</code></pre> <p> Bu, 2020 yılında verilen tüm siparişleri alacak, oluşturuldukları aya göre gruplandıracak ve yılın her ayında sipariş edilen toplam tutarı gösteren 12 kayıt döndürecektir. </p> <p> Lütfen daha iyi dizin performansı için tarih işlevlerini kullanmaktan kaçınmanın her zaman en iyisi olduğunu unutmayın. <strong> YIL() </strong> SQL deyimlerinin WHERE yan tümcesi içinde ve bunun yerine <strong> ARASINDA </strong> operatör yukarıdaki örnekte gösterildiği gibidir. </p> <p> </p> <h2 id=\"never-be-confused-with-dates-again\"> Bir Daha Asla Tarihlerle Karıştırmayın </h2> <p> Yukarıdaki bilgileri kullanarak, artık çok çeşitli kullanım durumlarında tarih ve saatlerde verimli bir şekilde çalışabilir, tercüme edebilir ve işlemler gerçekleştirebilirsiniz. </p> <p> Basitlik için tarihlerle çalışırken her zaman UTC&#39;yi kullanmayı unutmayın ve ister basit hesaplamaları tamamlamak ister tarih dönemlerine göre gruplandırılmış raporları kolayca almak olsun, yazılımınızdaki tarihleri ​​verimli bir şekilde yönetmek için yukarıdaki ipuçlarını kullanın. </p> <p> SQL&#39;de biraz yeniyseniz, bunları kontrol ettiğinizden emin olun. <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> temel SQL komutları </a> SQL kullanımınızı iyileştirmeye yardımcı olmak için. </p>"}