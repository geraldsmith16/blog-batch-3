{"title":"Як ефективно працювати з датами та часом у MySQL","content":"<p> Дати та час є важливими, вони допомагають підтримувати все впорядковано та є невід’ємним аспектом будь-якої операції з програмним забезпеченням. </p> <p> Ефективна робота з ними в базі даних іноді може здатися заплутаною, незалежно від того, чи працює вона в різних часових поясах, додає / віднімає дати та інші операції. </p> <p> Вивчіть різні функції MySQL, доступні для легкої обробки та керування датами / часом у вашій базі даних. </p> <h2 id=\"working-with-time-zones\"> Робота з часовими поясами </h2> <p> Щоб допомогти зберегти стандартизацію, вам слід завжди працювати з датами / часами в часовому поясі UTC. Кожного разу, коли ви встановлюєте підключення до бази даних MySQL, вам слід переключити часовий пояс на UTC, що можна зробити за допомогою наступного оператора SQL: </p> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <p> Оскільки всі дати тепер будуть збережені в UTC, ви завжди знаєте, з чим працюєте, роблячи речі більш спрощеними та прямими. </p> <p> При необхідності ви можете легко <a href=\"https://www.makeuseof.com/tag/polytime-time-zone-conversion-app/\" target=\"_blank\" rel=\"nofollow noopener\"> перетворити часовий пояс </a> будь-якого значення дати / часу з позначкою handy <strong> CONVERT_TZ () </strong> Функція MySQL. Спочатку потрібно знати відстань, наприклад, PST на західному узбережжі Північної Америки становить UTC -08: 00, щоб ви могли використовувати: </p> <pre><code class=\"hljs ruby\">SELECT CONVERT_TZ('2021-02-04 21:47:23', '+0:00', '-8:00');</code></pre> <p> Це призводить до <strong> 2021-02-04 13:47:23 </strong> що точно правильно. Три аргументи, передані <strong> CONVERT_TZ () </strong> є першою міткою часу / часу, з якої ви починаєте (використовуйте зараз () для поточного часу), другою завжди буде <strong> &#39;+0: 00&#39; </strong> оскільки всі дати в базі даних примусові до UTC, і остання - це зсув, в який ми хочемо перетворити дату. </p> <p> </p> <h2 id=\"add-subtract-dates\"> Додавання / віднімання дат </h2> <p> Багато разів вам потрібно додати або відняти від дат, наприклад, якщо вам потрібно отримати записи тижня тому, або <a href=\"https://www.makeuseof.com/how-to-use-crontab-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> запланувати щось </a> через місяць. </p> <p> На щастя, MySQL має чудові <strong> DATE_ADD () </strong> і <strong> DATE_SUB () </strong> функції, що роблять це завдання надзвичайно простим. Наприклад, ви можете відняти два тижні від поточної дати за допомогою оператора SQL: </p> <pre><code class=\"hljs\">SELECT DATE_SUB(now(), interval 2 week);</code></pre> <p> Якщо замість цього ви хочете додати три дні до існуючої позначки часу, ви б використали: </p> <pre><code class=\"hljs ruby\">SELECT DATE_ADD('2021-02-07 11:52:06', interval 3 day);</code></pre> <p> Обидві функції працюють однаково, перший аргумент - це мітка часу, з якої ви починаєте, а другий аргумент - інтервал додавання або віднімання. Другий аргумент завжди форматується однаково, починаючи зі слова <strong> інтервал </strong> за ними слід числове значення та сам інтервал, який може бути будь-яким із наступного: секунда, хвилина, година, день, тиждень, місяць, квартал, рік. </p> <p> Для іншого прикладу, якщо ви хочете отримати всі логіни, що відбулися за останні 34 хвилини, ви можете використовувати оператор SQL, такий як: </p> <pre><code class=\"hljs perl\">SELECT * FROM logins WHERE login_date >= DATE_SUB(now(), interval 45 minute);</code></pre> <p> Як бачите, це призведе до отримання всіх записів із <strong> логіни </strong> таблиця з датою входу, більшою за поточний час мінус 45 хвилин, або іншими словами, за останні 45 хвилин. </p> <p> </p> <h2 id=\"get-difference-between-dates\"> Отримайте різницю між датами </h2> <p> Іноді потрібно дізнатися, скільки часу минуло між двома датами. Ви можете легко отримати кількість днів між двома різними датами за допомогою <strong> DATEDIFF </strong> функція, така як наведений нижче оператор SQL: </p> <pre><code class=\"hljs ruby\">SELECT DATEDIFF(now(), '2020-12-15');</code></pre> <p> <strong> DATEDIFF </strong> Функція приймає два аргументи, обидва з яких є мітками дати / часу і задає кількість днів між ними. У наведеному вище прикладі буде показано кількість днів, що минули з 15 грудня 2020 року до сьогодні. </p> <p> Щоб отримати кількість секунд між двома датами, <strong> TO_SECONDS () </strong> функція може стати в нагоді, наприклад: </p> <pre><code class=\"hljs ruby\">SELECT TO_SECONDS(now()) - TO_SECONDS('2021-02-05 11:56:41');</code></pre> <p> Це призведе до кількості секунд між двома вказаними датами. </p> <p> </p> <h2 id=\"extract-segments-from-dates\"> Витяг сегментів із дат </h2> <p> Існують різні функції MySQL, які дозволяють легко витягувати певні сегменти з дат, наприклад, якщо ви хотіли лише місяць, день року або годину. Ось кілька прикладів таких функцій: </p> <pre><code class=\"hljs ruby\">SELECT MONTH('2021-02-11 15:27:52');</code></pre> <pre><code class=\"hljs\">SELECT HOUR(now());</code></pre> <pre><code class=\"hljs ruby\">SELECT DAYOFYEAR('2021-07-15 12:00:00');</code></pre> <p> Вищезазначені оператори SQL призведуть до <strong> 02 </strong> , поточна година, та <strong> 196 </strong> оскільки 15 вересня - 196-й день року. Ось список усіх доступних функцій вилучення дат, кожна з яких бере лише один аргумент, з якої витягується дата: </p> <pre><code class=\"hljs perl\">- SECOND()<br>- MINUTE()<br>- HOUR()<br>- DAY()<br>- WEEK() - Number 0 - 52 defining the week within the year.<br>- MONTH()<br>- QUARTER() - Number 1 - 4 defining the quarter of the year.<br>- YEAR()<br>- DAYOFYEAR() - The day of the year (eg. Sept 15th = 196).<br>- LAST_DAY() - The last day in the given month.<br>- DATE() - The date in YYYY-MM-DD format without the time.<br>- TIME() The time in HH:II:SS format without the date.<br>- TO_DAYS() - The number of days since A.D. 0.<br>- TO_SECONDS() - The number of seconds since A.D. 0.<br>- UNIX_TIMESTAMP() - The number of seconds since the epoch (Jan 1st, 1970)</code></pre> <p> Наприклад, якщо, можливо, ви хотіли отримати лише місяць та рік, які були створені всіми користувачами, ви можете використовувати оператор SQL, такий як: </p> <pre><code class=\"hljs\">SELECT id, MONTH(created_at), YEAR(created_at) FROM users;</code></pre> <p> Це призведе до отримання всіх записів у <strong> користувачів </strong> таблиці та покажіть ідентифікатор, місяць та рік, в якому кожен користувач був створений. </p> <p> </p> <h2 id=\"grouping-records-by-date-period\"> Групування записів за періодом дати </h2> <p> Однією з відмінних функцій дати є можливість групувати записи за періодом використання <strong> ГРУПА ЗА </strong> у ваших операторах SQL. Наприклад, можливо, ви хочете отримати загальну суму всіх замовлень у 2020 році, згрупованих за місяцями. Ви можете використовувати оператор SQL, такий як: </p> <pre><code class=\"hljs ruby\">SELECT MONTH(created_at), SUM(amount) FROM orders WHERE created_at BETWEEN '2020-01-01 00:00:00' AND '2020-12-31 23:59:59' GROUP BY MONTH(created_at);</code></pre> <p> Це дозволило б отримати всі замовлення, розміщені у 2020 році, згрупувати їх за місяцем їх створення та повернути 12 записів, що відображають загальну суму, замовлену кожного місяця року. </p> <p> Зверніть увагу, для кращої роботи індексу завжди краще уникати використання функцій дати, таких як <strong> РІК () </strong> в реченні WHERE операторів SQL, а замість цього використовуйте <strong> МІЖ </strong> оператора, як показано у наведеному вище прикладі. </p> <p> </p> <h2 id=\"never-be-confused-with-dates-again\"> Ніколи більше не плутайте дати </h2> <p> Використовуючи вищезазначені знання, ви тепер можете ефективно працювати, перекладати та виконувати операції за датами та часом у широкому спектрі випадків використання. </p> <p> Не забувайте завжди використовувати UTC, коли працюєте з датами для простоти, і використовуйте наведені вище поради для ефективного управління датами у вашому програмному забезпеченні, будь то для виконання простих обчислень або легкого складання звітів, згрупованих за періодами дат. </p> <p> Якщо ви дещо новачок у SQL, обов’язково перевірте їх <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> необхідні команди SQL </a> допомогти покращити використання SQL. </p>"}