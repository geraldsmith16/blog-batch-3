{"title":"Cách dễ dàng mã hóa và giải mã các tệp và thư mục trong Linux","content":"<p> Bạn đã bao giờ muốn nhanh chóng và dễ dàng mã hóa các tệp trong Linux mà không cần phải cài đặt và tìm hiểu các gói phần mềm mới? Đây là một cách tuyệt vời và dễ dàng để dễ dàng mã hóa tệp hoặc thư mục thông qua AES256 được bảo mật bằng mật khẩu, giúp giữ cho tệp của bạn tránh khỏi những con mắt tò mò. </p> <h2 id=\"the-basics-of-encryption-with-openssl\"> Khái niệm cơ bản về mã hóa với OpenSSL </h2> <p> Điều quan trọng cần lưu ý là có rất nhiều thứ liên quan đến mã hóa hơn thế này. </p> <p> Bạn có thể thận trọng khi đọc <a href=\"https://www.openssl.org/docs/\" target=\"_blank\" rel=\"nofollow noopener\"> Tài liệu OpenSSL </a> trước khi tin tưởng phương pháp này với dữ liệu của bạn. Tuy nhiên, giả sử bạn không cố gắng trốn tránh NSA hoặc quân đội Nga, phương pháp này sẽ hoạt động hoàn hảo để giữ an toàn cho các tệp và thư mục của bạn và người khác không thể truy cập được. </p> <p> </p> <h2 id=\"install-openssl\"> Cài đặt OpenSSL </h2> <p> Bạn cần cài đặt gói OpenSSL phổ biến, vì vậy trước tiên hãy kiểm tra xem nó đã được cài đặt với <a href=\"https://www.makeuseof.com/basic-commands-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> Lệnh Linux </a> : </p> <pre><code class=\"hljs\">openssl version</code></pre> <p> Nếu nó in số phiên bản hiện tại, bạn đã sẵn sàng cho phần tiếp theo. Ngược lại, nếu bạn nhận được lỗi &quot;không tìm thấy lệnh&quot;, bạn có thể dễ dàng cài đặt OpenSSL thông qua apt-get: </p> <pre><code class=\"hljs perl\">sudo apt-get -y install openssl</code></pre> <p> </p> <h2 id=\"encrypt-and-decrypt-files\"> Mã hóa và giải mã tệp </h2> <p> Ví dụ: nếu bạn muốn mã hóa một tệp có tên data.tar.gz, bạn sẽ chạy lệnh: </p> <pre><code class=\"hljs\">openssl aes-256-cbc -a -salt -iter 5 -in data.tar.gz -out data.enc</code></pre> <p> Bạn sẽ được nhắc nhập mật khẩu mã hóa hai lần, có thể là bất cứ thứ gì bạn muốn. Lệnh này sẽ dẫn đến một tệp data.enc mới là tệp mới được mã hóa. Xin lưu ý, thao tác này sẽ giữ nguyên vị trí của tệp data.tar.gz gốc, vì vậy hãy đảm bảo xóa nó nếu cần. </p> <p> Khi muốn, bạn có thể giải mã tệp data.enc bằng lệnh: </p> <pre><code class=\"hljs\">openssl aes-256-cbc -d -a -iter 5 -in data.enc -out data_decrypted.tar.gz</code></pre> <p> Lệnh trên sẽ nhắc bạn nhập mật khẩu mã hóa, sau đó dẫn đến tệp data_decrypted.tar.gz chứa phiên bản được giải mã của tệp của bạn. </p> <p> </p> <h2 id=\"encrypt-and-decrypt-directories\"> Mã hóa và giải mã thư mục </h2> <p> Các lệnh trong phần trên hoạt động tốt cho các tệp riêng lẻ, nhưng điều gì sẽ xảy ra nếu bạn muốn mã hóa toàn bộ thư mục? Không có hỗ trợ tích hợp trong OpenSSL cho việc này, nhưng nhờ sự kỳ diệu của Linux, điều này không có vấn đề gì. Ví dụ: nếu bạn muốn mã hóa một thư mục có tên &quot;tài liệu&quot;, bạn có thể sử dụng lệnh: </p> <pre><code class=\"hljs\">tar -cf tmpdata.tar documents && gzip tmpdata.tar && openssl aes-256-cbc -a -salt -iter 5 -in tmpdata.tar.gz -out documents.enc && rm -f tmpdata.tar.gz</code></pre> <p> Hơi lạ, nhưng hai vị trí duy nhất trong lệnh trên mà bạn cần sửa đổi là &quot;tài liệu&quot; trong phân đoạn đầu tiên là thư mục để mã hóa và &quot;tài liệu.enc&quot; trong phân đoạn thứ ba là tệp được mã hóa kết quả. Lệnh này sẽ lưu trữ thư mục, mã hóa nó, sau đó xóa tệp lưu trữ tạm thời được tạo để lại một tệp tin Documents.enc được mã hóa duy nhất ở vị trí của nó. </p> <p> Việc giải mã tệp Documents.enc mới được tạo cũng dễ dàng bằng lệnh: </p> <pre><code class=\"hljs\">openssl aes-256-cbc -d -a -iter 5 -in documents.enc -out tmpdata.tar.gz && tar -xzf tmpdata.tar.gz && rm -f tmpdata.tar.gz</code></pre> <p> Phần duy nhất của lệnh trên mà bạn cần sửa đổi là &quot;Documents.enc&quot; trong phân đoạn đầu tiên là tên của tệp được mã hóa. Lệnh này sẽ nhắc bạn nhập mật khẩu mã hóa, tiến hành giải mã và giải nén tệp lưu trữ, sau đó xóa tệp lưu trữ tạm thời để lại thư mục được giải mã. </p> <p> </p> <h2 id=\"protect-your-data\"> Bảo vệ dữ liệu của bạn </h2> <p> Bây giờ bạn đã biết việc mã hóa và giải mã dữ liệu của mình nhanh chóng dễ dàng như thế nào, hãy nâng cao kiến ​​thức của bạn để sử dụng và giữ an toàn cho dữ liệu cá nhân của bạn và tránh <a href=\"https://www.makeuseof.com/worst-data-breaches/\" target=\"_blank\" rel=\"nofollow noopener\"> vi phạm dữ liệu </a> . Một lần nữa để nhắc lại, có nhiều thứ liên quan đến mã hóa hơn được trình bày ở đây và những điều trên không nhằm mục đích trốn tránh cơ quan thực thi pháp luật hoặc các tin tặc có kỹ năng cao và kiên quyết. </p> <p> Tuy nhiên, nếu bạn chỉ muốn bảo vệ dữ liệu của mình trước những con mắt tò mò như của anh rể hoặc kỹ thuật viên sửa chữa máy tính, thì các phương pháp trên sẽ thực hiện rất tốt. </p>"}