{"title":"Cách làm việc hiệu quả với ngày và giờ trong MySQL","content":"<p> Ngày và giờ rất quan trọng, chúng giúp giữ mọi thứ có tổ chức và là một khía cạnh không thể thiếu của bất kỳ hoạt động phần mềm nào. </p> <p> Làm việc hiệu quả với chúng trong cơ sở dữ liệu đôi khi có vẻ khó hiểu, cho dù nó hoạt động trên các múi giờ khác nhau, cộng / trừ ngày tháng và các thao tác khác. </p> <p> Tìm hiểu các hàm MySQL khác nhau có sẵn để dễ dàng xử lý và quản lý ngày / giờ trong cơ sở dữ liệu của bạn. </p> <h2 id=\"working-with-time-zones\"> Làm việc với các múi giờ </h2> <p> Để giúp mọi thứ được chuẩn hóa, bạn chỉ nên làm việc với ngày / giờ theo múi giờ UTC. Mỗi khi bạn thiết lập kết nối với cơ sở dữ liệu MySQL, bạn nên chuyển múi giờ sang UTC, điều này có thể được thực hiện bằng câu lệnh SQL sau: </p> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <p> Vì tất cả các ngày giờ sẽ được lưu trong UTC, bạn luôn biết mình đang làm việc với cái gì, khiến mọi thứ trở nên đơn giản và dễ hiểu hơn. </p> <p> Khi cần thiết bạn có thể dễ dàng <a href=\"https://www.makeuseof.com/tag/polytime-time-zone-conversion-app/\" target=\"_blank\" rel=\"nofollow noopener\"> chuyển đổi múi giờ </a> của bất kỳ giá trị ngày giờ / dấu thời gian nào với <strong> CONVERT_TZ () </strong> Hàm MySQL. Trước tiên, bạn cần biết mức chênh lệch, ví dụ: PST ở bờ biển phía tây của Bắc Mỹ là UTC -08: 00, vì vậy bạn có thể sử dụng: </p> <pre><code class=\"hljs ruby\">SELECT CONVERT_TZ('2021-02-04 21:47:23', '+0:00', '-8:00');</code></pre> <p> Kết quả này trong <strong> 2021-02-04 13:47:23 </strong> mà là chính xác. Ba đối số được chuyển đến <strong> CONVERT_TZ () </strong> đầu tiên là datetime / timestamp mà bạn đang bắt đầu (sử dụng ngay bây giờ () cho thời gian hiện tại), thứ hai sẽ luôn là <strong> &#39;+0: 00&#39; </strong> vì tất cả các ngày được buộc phải tính theo giờ UTC trong cơ sở dữ liệu và ngày cuối cùng là phần bù mà chúng tôi muốn chuyển đổi ngày thành. </p> <p> </p> <h2 id=\"add-subtract-dates\"> Thêm / trừ ngày </h2> <p> Nhiều khi bạn cần thêm vào hoặc trừ các ngày tháng, chẳng hạn như nếu bạn cần truy xuất các bản ghi từ một tuần trước, hoặc <a href=\"https://www.makeuseof.com/how-to-use-crontab-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> lên lịch trình gì đó </a> một tháng kể từ bây giờ. </p> <p> Rất may, MySQL có <strong> DATE_ADD () </strong> và <strong> DATE_SUB () </strong> làm cho nhiệm vụ này trở nên cực kỳ dễ dàng. Ví dụ: bạn có thể trừ hai tuần kể từ ngày hiện tại bằng câu lệnh SQL: </p> <pre><code class=\"hljs\">SELECT DATE_SUB(now(), interval 2 week);</code></pre> <p> Thay vào đó, nếu bạn muốn thêm ba ngày vào dấu thời gian hiện có, bạn sẽ sử dụng: </p> <pre><code class=\"hljs ruby\">SELECT DATE_ADD('2021-02-07 11:52:06', interval 3 day);</code></pre> <p> Cả hai hàm đều hoạt động giống nhau, đối số đầu tiên là dấu thời gian bạn đang bắt đầu và đối số thứ hai là khoảng thời gian để cộng hoặc trừ. Đối số thứ hai luôn được định dạng giống nhau bắt đầu bằng từ <strong> khoảng thời gian </strong> theo sau là một giá trị số và chính khoảng thời gian, có thể là bất kỳ giá trị nào sau đây: giây, phút, giờ, ngày, tuần, tháng, quý, năm. </p> <p> Ví dụ khác, nếu bạn muốn truy xuất tất cả thông tin đăng nhập đã xảy ra trong 34 phút qua, bạn có thể sử dụng câu lệnh SQL như: </p> <pre><code class=\"hljs perl\">SELECT * FROM logins WHERE login_date >= DATE_SUB(now(), interval 45 minute);</code></pre> <p> Như bạn có thể thấy, điều này sẽ truy xuất tất cả các bản ghi từ <strong> đăng nhập </strong> bảng có ngày đăng nhập lớn hơn thời gian hiện tại trừ đi 45 phút, hay nói cách khác là 45 phút qua. </p> <p> </p> <h2 id=\"get-difference-between-dates\"> Nhận được sự khác biệt giữa các ngày </h2> <p> Đôi khi bạn cần biết khoảng thời gian đã trôi qua giữa hai ngày. Bạn có thể dễ dàng nhận được số ngày giữa hai ngày khác nhau với <strong> DATEDIFF </strong> , chẳng hạn như câu lệnh SQL bên dưới: </p> <pre><code class=\"hljs ruby\">SELECT DATEDIFF(now(), '2020-12-15');</code></pre> <p> Các <strong> DATEDIFF </strong> hàm nhận hai đối số, cả hai đều là dấu ngày / giờ và cho biết số ngày giữa chúng. Ví dụ trên sẽ hiển thị số ngày trôi qua từ ngày 15 tháng 12 năm 2020 cho đến hôm nay. </p> <p> Để có số giây giữa hai ngày, <strong> TO_SECONDS () </strong> chức năng có thể hữu ích, ví dụ: </p> <pre><code class=\"hljs ruby\">SELECT TO_SECONDS(now()) - TO_SECONDS('2021-02-05 11:56:41');</code></pre> <p> Điều này sẽ dẫn đến số giây giữa hai ngày được cung cấp. </p> <p> </p> <h2 id=\"extract-segments-from-dates\"> Trích xuất phân đoạn từ ngày </h2> <p> Có nhiều hàm MySQL khác nhau cho phép bạn dễ dàng trích xuất các phân đoạn cụ thể từ các ngày, chẳng hạn như nếu bạn chỉ muốn tháng, ngày trong năm hoặc giờ. Dưới đây là một vài ví dụ về các chức năng như vậy: </p> <pre><code class=\"hljs ruby\">SELECT MONTH('2021-02-11 15:27:52');</code></pre> <pre><code class=\"hljs\">SELECT HOUR(now());</code></pre> <pre><code class=\"hljs ruby\">SELECT DAYOFYEAR('2021-07-15 12:00:00');</code></pre> <p> Các câu lệnh SQL trên sẽ dẫn đến <strong> 02 </strong> , giờ hiện tại và <strong> 196 </strong> vì ngày 15 tháng 9 là ngày thứ 196 trong năm. Dưới đây là danh sách tất cả các hàm trích xuất ngày tháng có sẵn, mỗi hàm chỉ lấy một đối số, ngày tháng được trích xuất từ: </p> <pre><code class=\"hljs perl\">- SECOND()<br>- MINUTE()<br>- HOUR()<br>- DAY()<br>- WEEK() - Number 0 - 52 defining the week within the year.<br>- MONTH()<br>- QUARTER() - Number 1 - 4 defining the quarter of the year.<br>- YEAR()<br>- DAYOFYEAR() - The day of the year (eg. Sept 15th = 196).<br>- LAST_DAY() - The last day in the given month.<br>- DATE() - The date in YYYY-MM-DD format without the time.<br>- TIME() The time in HH:II:SS format without the date.<br>- TO_DAYS() - The number of days since A.D. 0.<br>- TO_SECONDS() - The number of seconds since A.D. 0.<br>- UNIX_TIMESTAMP() - The number of seconds since the epoch (Jan 1st, 1970)</code></pre> <p> Ví dụ: nếu có thể bạn chỉ muốn truy xuất tháng và năm mà tất cả người dùng đã được tạo, bạn có thể sử dụng câu lệnh SQL như: </p> <pre><code class=\"hljs\">SELECT id, MONTH(created_at), YEAR(created_at) FROM users;</code></pre> <p> Điều này sẽ truy xuất tất cả các bản ghi trong <strong> người dùng </strong> bảng và hiển thị id #, tháng và năm mà mỗi người dùng đã được tạo. </p> <p> </p> <h2 id=\"grouping-records-by-date-period\"> Nhóm các bản ghi theo khoảng ngày </h2> <p> Một cách sử dụng tuyệt vời của các hàm ngày là khả năng nhóm các bản ghi theo khoảng thời gian bằng cách sử dụng <strong> NHÓM THEO </strong> trong các câu lệnh SQL của bạn. Ví dụ: có thể bạn muốn tổng số lượng tất cả các đơn đặt hàng trong năm 2020 được nhóm lại theo tháng. Bạn có thể sử dụng một câu lệnh SQL như: </p> <pre><code class=\"hljs ruby\">SELECT MONTH(created_at), SUM(amount) FROM orders WHERE created_at BETWEEN '2020-01-01 00:00:00' AND '2020-12-31 23:59:59' GROUP BY MONTH(created_at);</code></pre> <p> Điều này sẽ truy xuất tất cả các đơn đặt hàng được đặt trong năm 2020, nhóm chúng theo tháng chúng được tạo và trả về 12 bản ghi cho thấy tổng số lượng đã đặt hàng mỗi tháng trong năm. </p> <p> Xin lưu ý, để có hiệu suất chỉ mục tốt hơn, tốt nhất bạn nên tránh sử dụng các hàm ngày như <strong> NĂM() </strong> trong mệnh đề WHERE của câu lệnh SQL và thay vào đó sử dụng <strong> GIỮA </strong> như trong ví dụ trên. </p> <p> </p> <h2 id=\"never-be-confused-with-dates-again\"> Đừng bao giờ bối rối với ngày một lần nữa </h2> <p> Sử dụng kiến ​​thức trên, giờ đây bạn có thể làm việc, dịch và thực hiện các thao tác theo ngày và giờ trong một loạt các trường hợp sử dụng một cách hiệu quả. </p> <p> Hãy nhớ luôn sử dụng UTC khi làm việc với ngày tháng để đơn giản hóa và sử dụng các mẹo trên để quản lý hiệu quả ngày tháng trong phần mềm của bạn, cho dù đó là để hoàn thành các phép tính đơn giản hay dễ dàng lấy các báo cáo được nhóm theo khoảng thời gian ngày tháng. </p> <p> Nếu bạn là người mới làm quen với SQL, hãy nhớ xem những <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> các lệnh SQL cơ bản </a> để giúp cải thiện việc sử dụng SQL của bạn. </p>"}