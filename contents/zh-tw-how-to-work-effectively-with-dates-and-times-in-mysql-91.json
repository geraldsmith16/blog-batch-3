{"title":"如何有效地處理 MySQL 中的日期和時間","content":"<p> 日期和時間很重要，它們有助於使事情井井有條，並且是任何軟件操作的一個組成部分。 </p> <p> 在數據庫中有效地使用它們有時看起來令人困惑，無論是跨不同時區工作、添加/減去日期還是其他操作。 </p> <p> 了解可用於輕鬆處理和管理數據庫中的日期/時間的各種 MySQL 函數。 </p> <h2 id=\"working-with-time-zones\"> 使用時區 </h2> <p> 為了幫助保持標準化，您應該只使用 UTC 時區的日期/時間。每次與 MySQL 數據庫建立連接時，都應將時區切換為 UTC，這可以通過以下 SQL 語句完成： </p> <pre><code class=\"hljs ruby\">SET TIME_ZONE = '+0:00'</code></pre> <p> 由於現在所有日期都將以 UTC 格式保存，因此您始終知道自己在處理什麼，從而使事情變得更加簡單和直接。 </p> <p> 必要時您可以輕鬆地 <a href=\"https://www.makeuseof.com/tag/polytime-time-zone-conversion-app/\" target=\"_blank\" rel=\"nofollow noopener\"> 轉換時區 </a> 使用方便的任何日期時間/時間戳值 <strong> CONVERT_TZ() </strong> MySQL 函數。您需要先知道偏移量，例如北美西海岸的 PST 是 UTC -08:00，因此您可以使用： </p> <pre><code class=\"hljs ruby\">SELECT CONVERT_TZ('2021-02-04 21:47:23', '+0:00', '-8:00');</code></pre> <p> 這導致 <strong> 2021-02-04 13:47:23 </strong> 這是完全正確的。傳遞給的三個參數 <strong> CONVERT_TZ() </strong> 第一個是您開始的日期時間/時間戳（使用 now() 表示當前時間），第二個將始終是 <strong> &#39;+0:00&#39; </strong> 因為數據庫中的所有日期都強制為 UTC，最後一個是我們希望將日期轉換為的偏移量。 </p> <p> </p> <h2 id=\"add-subtract-dates\"> 添加/減去日期 </h2> <p> 很多時候你需要增加或減少日期，比如如果你需要檢索一周前的記錄，或者 <a href=\"https://www.makeuseof.com/how-to-use-crontab-linux/\" target=\"_blank\" rel=\"nofollow noopener\"> 安排某事 </a> 一個月後。 </p> <p> 謝天謝地，MySQL 具有出色的 <strong> DATE_ADD() </strong> 和 <strong> DATE_SUB() </strong> 功能使這項任務非常容易。例如，您可以使用 SQL 語句從當前日期減去兩週： </p> <pre><code class=\"hljs\">SELECT DATE_SUB(now(), interval 2 week);</code></pre> <p> 相反，如果您想在現有時間戳中添加三天，您可以使用： </p> <pre><code class=\"hljs ruby\">SELECT DATE_ADD('2021-02-07 11:52:06', interval 3 day);</code></pre> <p> 兩個函數的工作方式相同，第一個參數是您開始的時間戳，第二個參數是要添加或減去的間隔。第二個參數的格式始終相同，以單詞開頭 <strong> 間隔 </strong> 後跟一個數值和間隔本身，它可以是以下任何一項：秒、分鐘、小時、日、週、月、季度、年。 </p> <p> 再舉一個例子，如果您想檢索過去 34 分鐘內發生的所有登錄，您可以使用如下 SQL 語句： </p> <pre><code class=\"hljs perl\">SELECT * FROM logins WHERE login_date >= DATE_SUB(now(), interval 45 minute);</code></pre> <p> 如您所見，這將從中檢索所有記錄 <strong> 登錄 </strong> 登錄日期大於當前時間減去 45 分鐘，即過去 45 分鐘的表。 </p> <p> </p> <h2 id=\"get-difference-between-dates\"> 獲取日期之間的差異 </h2> <p> 有時您需要獲取兩個日期之間經過的時間。您可以使用以下命令輕鬆獲取兩個不同日期之間的天數 <strong> 日期差異 </strong> 函數，例如下面的SQL語句： </p> <pre><code class=\"hljs ruby\">SELECT DATEDIFF(now(), '2020-12-15');</code></pre> <p> 這 <strong> 日期差異 </strong> 函數接受兩個參數，這兩個參數都是日期/時間戳，並給出它們之間的天數。上面的示例將顯示從 2020 年 12 月 15 日到今天經過的天數。 </p> <p> 要獲取兩個日期之間的秒數， <strong> TO_SECONDS() </strong> 函數可以派上用場，例如： </p> <pre><code class=\"hljs ruby\">SELECT TO_SECONDS(now()) - TO_SECONDS('2021-02-05 11:56:41');</code></pre> <p> 這將導致提供的兩個日期之間的秒數。 </p> <p> </p> <h2 id=\"extract-segments-from-dates\"> 從日期中提取段 </h2> <p> 有各種 MySQL 函數可讓您輕鬆地從日期中提取特定段，例如您是否只需要月份、年份或小時。以下是此類函數的一些示例： </p> <pre><code class=\"hljs ruby\">SELECT MONTH('2021-02-11 15:27:52');</code></pre> <pre><code class=\"hljs\">SELECT HOUR(now());</code></pre> <pre><code class=\"hljs ruby\">SELECT DAYOFYEAR('2021-07-15 12:00:00');</code></pre> <p> 上面的 SQL 語句會導致 <strong> 02 </strong> ，當前小時，以及 <strong> 196 </strong> 因為 9 月 15 日是一年中的第 196 天。這是所有可用日期提取函數的列表，每個函數只接受一個參數，即從中提取日期： </p> <pre><code class=\"hljs perl\">- SECOND()<br>- MINUTE()<br>- HOUR()<br>- DAY()<br>- WEEK() - Number 0 - 52 defining the week within the year.<br>- MONTH()<br>- QUARTER() - Number 1 - 4 defining the quarter of the year.<br>- YEAR()<br>- DAYOFYEAR() - The day of the year (eg. Sept 15th = 196).<br>- LAST_DAY() - The last day in the given month.<br>- DATE() - The date in YYYY-MM-DD format without the time.<br>- TIME() The time in HH:II:SS format without the date.<br>- TO_DAYS() - The number of days since A.D. 0.<br>- TO_SECONDS() - The number of seconds since A.D. 0.<br>- UNIX_TIMESTAMP() - The number of seconds since the epoch (Jan 1st, 1970)</code></pre> <p> 例如，如果您只想檢索所有用戶創建的月份和年份，您可以使用 SQL 語句，例如： </p> <pre><code class=\"hljs\">SELECT id, MONTH(created_at), YEAR(created_at) FROM users;</code></pre> <p> 這將檢索內的所有記錄 <strong> 用戶 </strong> 表並顯示創建每個用戶的 id#、月份和年份。 </p> <p> </p> <h2 id=\"grouping-records-by-date-period\"> 按日期期間分組記錄 </h2> <p> 日期函數的一個很好的用途是能夠使用 <strong> 通過...分組 </strong> 在您的 SQL 語句中。例如，您可能希望按月分組拉取 2020 年所有訂單的總金額。您可以使用 SQL 語句，例如： </p> <pre><code class=\"hljs ruby\">SELECT MONTH(created_at), SUM(amount) FROM orders WHERE created_at BETWEEN '2020-01-01 00:00:00' AND '2020-12-31 23:59:59' GROUP BY MONTH(created_at);</code></pre> <p> 這將檢索 2020 年下的所有訂單，按創建月份對它們進行分組，並返回 12 條記錄，顯示一年中每個月的訂單總額。 </p> <p> 請注意，為了獲得更好的索引性能，最好避免使用日期函數，例如 <strong> 年（） </strong> 在 SQL 語句的 WHERE 子句中，而是使用 <strong> 之間 </strong> 運算符，如上例所示。 </p> <p> </p> <h2 id=\"never-be-confused-with-dates-again\"> 永遠不要再與日期混淆 </h2> <p> 使用上述知識，您現在可以在各種用例中有效地處理、翻譯和執行日期和時間的操作。 </p> <p> 為了簡單起見，請記住在處理日期時始終使用 UTC，並利用上述技巧在您的軟件中有效管理日期，無論是完成簡單計算還是輕鬆提取按日期時間段分組的報告。 </p> <p> 如果您對 SQL 有點陌生，請務必查看這些 <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> 基本的 SQL 命令 </a> 幫助改進您的 SQL 使用。 </p>"}